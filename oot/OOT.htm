<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"ＭＳ 明朝";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 1 6 1 0 1 1 1 1 1;}
@font-face
	{font-family:"ＭＳ ゴシック";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:MingLiU;
	panose-1:2 1 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"MS UI Gothic";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"ＭＳ Ｐゴシック";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"ＭＳ Ｐ明朝";
	panose-1:2 2 6 0 4 2 5 8 3 4;}
@font-face
	{font-family:メイリオ;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Garamond;
	panose-1:2 2 4 4 3 3 1 1 8 3;}
@font-face
	{font-family:"Wingdings 2";
	panose-1:5 2 1 2 1 5 7 7 7 7;}
@font-face
	{font-family:"\@ＭＳ Ｐゴシック";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"\@メイリオ";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@ＭＳ 明朝";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"\@ＭＳ Ｐ明朝";
	panose-1:2 2 6 0 4 2 5 8 3 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
h1
	{mso-style-link:"見出し 1 \(文字\)";
	margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:55.3pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-55.3pt;
	font-size:18.0pt;
	font-family:"ＭＳ Ｐゴシック";
	letter-spacing:1.0pt;
	font-weight:normal;}
h2
	{mso-style-link:"見出し 2 \(文字\)";
	margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:73.75pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-73.75pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"ＭＳ Ｐゴシック";
	font-weight:normal;}
h3
	{mso-style-link:"見出し 3 \(文字\)";
	margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:34.05pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-34.05pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"ＭＳ Ｐゴシック";
	font-weight:normal;}
h4
	{mso-style-link:"見出し 4 \(文字\)";
	margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:19.85pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-19.85pt;
	font-size:10.0pt;
	font-family:メイリオ;
	font-weight:normal;}
h5
	{mso-style-link:"見出し 5 \(文字\)";
	margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:10.0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-11.35pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐ明朝","serif";
	font-weight:normal;}
h6
	{mso-style-link:"見出し 6 \(文字\)";
	margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:19.85pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-11.35pt;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-link:"見出し 7 \(文字\)";
	margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐ明朝","serif";
	text-decoration:underline;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:12.0pt;
	margin-right:0mm;
	margin-bottom:6.0pt;
	margin-left:0mm;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";
	font-weight:bold;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:6.0pt;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:10.5pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";
	font-style:italic;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:21.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:31.5pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:42.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:52.5pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:63.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:73.5pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoNormalIndent, li.MsoNormalIndent, div.MsoNormalIndent
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:22.7pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐ明朝","serif";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"ヘッダー \(文字\)";
	margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	layout-grid-mode:char;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"フッター \(文字\)";
	margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	layout-grid-mode:char;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐゴシック";}
span.MsoPageNumber
	{font-family:"Arial","sans-serif";}
p.MsoListBullet, li.MsoListBullet, div.MsoListBullet
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:34.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-11.3pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐ明朝","serif";}
p.MsoListBullet2, li.MsoListBullet2, div.MsoListBullet2
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:45.35pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-22.65pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐ明朝","serif";}
p.MsoListBullet3, li.MsoListBullet3, div.MsoListBullet3
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:51.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-17.0pt;
	font-size:10.0pt;
	font-family:"ＭＳ Ｐ明朝","serif";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0mm;
	margin-left:0mm;
	font-size:12.0pt;
	font-family:"ＭＳ Ｐゴシック";}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"吹き出し \(文字\)";
	margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:9.0pt;
	font-family:"Arial","sans-serif";}
span.a
	{mso-style-name:"ヘッダー \(文字\)";
	mso-style-link:ヘッダー;}
span.a0
	{mso-style-name:"フッター \(文字\)";
	mso-style-link:フッター;}
span.1
	{mso-style-name:"見出し 1 \(文字\)";
	mso-style-link:"見出し 1";
	font-family:"ＭＳ Ｐゴシック";
	letter-spacing:1.0pt;}
span.2
	{mso-style-name:"見出し 2 \(文字\)";
	mso-style-link:"見出し 2";
	font-family:"ＭＳ Ｐゴシック";}
span.3
	{mso-style-name:"見出し 3 \(文字\)";
	mso-style-link:"見出し 3";
	font-family:"ＭＳ Ｐゴシック";}
span.4
	{mso-style-name:"見出し 4 \(文字\)";
	mso-style-link:"見出し 4";
	font-family:メイリオ;}
span.5
	{mso-style-name:"見出し 5 \(文字\)";
	mso-style-link:"見出し 5";
	font-family:"ＭＳ Ｐ明朝","serif";}
span.6
	{mso-style-name:"見出し 6 \(文字\)";
	mso-style-link:"見出し 6";
	font-family:メイリオ;}
span.7
	{mso-style-name:"見出し 7 \(文字\)";
	mso-style-link:"見出し 7";
	font-family:"ＭＳ Ｐ明朝","serif";
	text-decoration:underline;}
p.12pt, li.12pt, div.12pt
	{mso-style-name:"スタイル 標準インデント + ＭＳ Ｐゴシック 12 pt";
	margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:22.7pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:12.0pt;
	font-family:"ＭＳ Ｐゴシック";
	text-decoration:underline;}
p.16pt, li.16pt, div.16pt
	{mso-style-name:"スタイル ＭＳ Ｐゴシック 16 pt 中央揃え";
	margin:0mm;
	margin-bottom:.0001pt;
	text-align:center;
	font-size:16.0pt;
	font-family:"ＭＳ Ｐゴシック";}
span.a1
	{mso-style-name:"吹き出し \(文字\)";
	mso-style-link:吹き出し;
	font-family:"Arial","sans-serif";}
span.msoIns
	{mso-style-name:"";
	text-decoration:underline;
	color:teal;}
span.msoDel
	{mso-style-name:"";
	text-decoration:line-through;
	color:red;}
.MsoChpDefault
	{font-family:"Century","serif";}
 /* Page Definitions */
 @page WordSection1
	{size:210.0mm 842.0pt;
	margin:10.0mm 10.0mm 10.0mm 10.0mm;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0mm;}
ul
	{margin-bottom:0mm;}
-->
</style>

</head>

<body lang=JA link=blue vlink=purple style='text-justify-trim:punctuation'>

<div class=WordSection1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:18.0pt;font-family:メイリオ'>オブジェクト指向技術入門</span></p>

<p class=MsoNormal><span lang=EN-US>2024</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US>7</span><span style='font-family:メイリオ'>月更新</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>はじめに</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>  </span><span style='font-family:メイリオ'>オブジェクト指向技術にはいくつかの方法論があり、そこで使われている用語や概念は多少異なる場合があります。</span>
<span style='font-family:メイリオ'>特定の手法について学習される場合には、その手法の書籍も併せてご使用下さい。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>目次</span></p>

<p class=MsoToc1><span lang=EN-US><span class=MsoHyperlink><a
href="#_Toc173761468">1<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>．</span></span><span lang=EN-US><span lang=EN-US> </span></span><span
lang=EN-US style='font-family:メイリオ'><span lang=EN-US>オブジェクト指向技術とその目的</span></span><span
style='color:windowtext;display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761469">1.1 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ソフトウェア開発</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761470">1.2 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ソフトウエア開発における位置付け</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761471">1.3 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>アーキテクチャとは</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761472">1.4 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>手法とは</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761473">1.5 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>プロセスとは</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761474">1.6 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ツールとは</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761475">1.7 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>アプローチとは</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761476">1.8 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>パラダイムシフトとは</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761477">1.9 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト指向技術の出現</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761478">1.10 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>方法論の出現</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761479">1.11 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト指向技術に期待できるもの</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761480">2<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>．</span></span><span lang=EN-US><span lang=EN-US> </span></span><span
lang=EN-US style='font-family:メイリオ'><span lang=EN-US>オブジェクト指向技術の主要な概念</span></span><span
style='color:windowtext;display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761481">2.1 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761482">2.2 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクトを使ってモデル化する</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>8</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761483">2.3 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラス</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>8</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761484">2.4 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクトの追跡可能性</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>10</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761485">2.5 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オ<span lang=EN-US>ブジェクトのアイデンティティ</span></span></span><span
style='color:windowtext;display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>10</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761486">2.6 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクトを使う利点</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>10</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761487">2.7 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクトを発見する</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>11</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761488">2.8 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>カプセル化</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>12</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761489">2.9 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>属性</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>13</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761490">2.10 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト、クラス、インスタンス</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>14</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761491">2.11 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクトとインスタンス</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>15</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761492">2.12 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクトの候補</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>15</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761493">2.13 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラス図</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>16</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761494">2.14 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラス図と観点（</span></span>Martin Fowler,1997<span lang=EN-US
style='font-family:メイリオ'><span lang=EN-US>）</span></span><span
style='color:windowtext;display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>22</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761495">2.15 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>仕様の観点</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>22</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761496">2.16 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>関連（インスタンス間の関係）</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>22</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761497">2.17 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>集約とコンポジション</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>25</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761498">2.18 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>制約</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>25</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761499">2.19 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>多相性（ポリモーフィズム）</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>26</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761500">2.20 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>関連に関するその他の概念</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>30</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761501">3<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>．</span></span><span lang=EN-US><span lang=EN-US> </span></span><span
lang=EN-US style='font-family:メイリオ'><span lang=EN-US>オブジェクト指向システム開発</span></span><span
style='color:windowtext;display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>32</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761502">3.1 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>従来のシステム開発</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>32</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761503">3.2 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト指向開発の特徴</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>32</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761504">3.3 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト指向開発の流れ</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>33</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761505">3.4 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>開発プロセスと作成するモデル</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>35</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761506">3.5 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>モデル</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>35</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761507">3.6 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>分析プロセス</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>35</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761508">3.7 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>構築プロセス（設計モデルの作成）</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>39</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761509">3.8 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>構築プロセス（実装モデルの作成）</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>39</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761510">3.9 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>テストプロセス（テストモデルの作成）</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>40</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761511">3.10 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ユースケースモデル</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>40</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761512">4<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>．</span></span><span lang=EN-US><span lang=EN-US> </span></span><span
lang=EN-US style='font-family:メイリオ'><span lang=EN-US>統一モデリング言語</span></span><span
lang=EN-US><span lang=EN-US> </span></span><span lang=EN-US style='font-family:
メイリオ'><span lang=EN-US>ＵＭＬ</span></span><span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>42</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761513">4.1 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ＵＭＬの概要</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>43</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761514">4.2 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ユースケース</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>43</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761515">4.3 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラス図</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>45</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761516">4.4 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>相互作用図</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>48</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761517">4.5 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>パッケージ図</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>49</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761518">4.6 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>振舞い図</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>50</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761519">4.7 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>アクティビティ図</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>51</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761520">4.8 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ステレオタイプ</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>53</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761521">4.9 OCL <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>（</span></span>Object Constraint Language<span lang=EN-US
style='font-family:メイリオ'><span lang=EN-US>）</span></span><span
style='color:windowtext;display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>55</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761522">4.10 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>モデリングツール</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>56</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761523">5<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>．</span></span><span lang=EN-US><span lang=EN-US> </span></span><span
lang=EN-US style='font-family:メイリオ'><span lang=EN-US>オブジェクト指向プログラミング言語</span></span>Java<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>57</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761524">5.1 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト指向プログラミング言語</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>57</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761525">5.2 Java<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>の歴史</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>57</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761526">5.3 Java<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>の特徴</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>57</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761527">5.4 Java<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>を始める</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>59</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761528">5.5 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>基本型と参照型</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>59</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761529">5.6 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>変数宣言</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>60</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761530">5.7 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>演算子</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>61</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761531">5.8 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>制御フロー文</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>62</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761532">5.9 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>列挙型</span></span> enum<span style='color:windowtext;display:none;
text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>64</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761533">5.10 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>匿名クラス</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>64</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761534">5.11 this <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>と</span></span> super<span style='color:windowtext;display:none;
text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>64</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761535">5.12 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ボクシングとアンボクシング</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>65</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761536">5.13 javadoc<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>66</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761537">5.14 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ジェネリクス（総称型）</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>66</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761538">5.15 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>コレクション</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>67</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761539">5.16 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ストリーム</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>67</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761540">5.17 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ラムダ式</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>68</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761541">5.18 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>オブジェクト</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>68</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761542">5.19 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラス</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>70</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761543">5.20 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラスの拡張</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>74</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761544">5.21 final<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>宣言</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>84</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761545">5.22 Object<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラス</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>85</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761546">5.23 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>ラッパクラス（</span></span>Wrapper Class<span lang=EN-US style='font-family:
メイリオ'><span lang=EN-US>）</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>85</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761547">5.24 Class<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>クラス</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>85</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761548">5.25 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>抽象クラスと</span></span>abstract<span lang=EN-US style='font-family:
メイリオ'><span lang=EN-US>メソッド</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>86</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761549">5.26 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>インタフェース</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>87</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761550">5.27 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>例外クラス（</span></span>Exception<span lang=EN-US style='font-family:
メイリオ'><span lang=EN-US>）</span></span><span style='color:windowtext;display:
none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>89</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761551">5.28 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>スレッド</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>90</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761552">5.29 <span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>パッケージ</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>91</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761553">6<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>．</span></span><span lang=EN-US><span lang=EN-US> </span></span><span
lang=EN-US style='font-family:メイリオ'><span lang=EN-US>オブジェクト指向技術の導入</span></span><span
style='color:windowtext;display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>92</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc173761554">7<span lang=EN-US style='font-family:メイリオ'><span
lang=EN-US>．</span></span><span lang=EN-US><span lang=EN-US> </span></span><span
lang=EN-US style='font-family:メイリオ'><span lang=EN-US>永続化戦略</span></span><span
style='color:windowtext;display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>92</span></a></span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h1><span lang=EN-US>1． </span><span lang=EN-US> </span><a name="_Toc173761468"></a><a
name="_Toc171537156">オブジェクト指向技術とその目的</a></h1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　本章では、ソフトウエア開発技術におけるオブジェクト指向技術の位置付けと、その目的について説明します。　</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761469"></a><a name="_Toc171537157"><span lang=EN-US>1.1 </span>ソフトウェア開発</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ソフトウェアには、</span><span
lang=EN-US>Windows</span><span style='font-family:メイリオ'>などの</span><span
lang=EN-US>OS</span><span style='font-family:メイリオ'>、</span><span lang=EN-US>Java</span><span
style='font-family:メイリオ'>コンパイラなどの言語処理系、</span><span lang=EN-US>Spring</span><span
style='font-family:メイリオ'>などのフレームワーク、データベース管理システム、自動車の自動運転などの制御系システム、家電製品に搭載される組み込み系、企業で使われる基幹系業務システムなどがあります。それらを開発するためには、設計という作業が行われます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>開発プロセスがウォーターフォール型であれアジャイル型であれ必要な作業です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>設計にもいろいろな手法があります。企業内のチームや個人が築き上げた独自手法もあります。オブジェクト指向は手法の</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>つにです。適用される領域は、所謂ソフトウェアだけに限らず、ビジネスモデリングなどにも適用されています。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761470"></a><a name="_Toc171537158"><span lang=EN-US>1.2 </span>ソフトウエア開発における位置付け</a></h2>

<p class=MsoNormal style='text-indent:15.0pt'><span style='font-family:メイリオ'>例</span></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:19.6pt;border-collapse:collapse;border:none'>
 <tr style='height:26.5pt'>
  <td width=170 valign=top style='width:127.55pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:26.5pt'>
  <p class=MsoNormal><span style='font-family:メイリオ'>アーキテクチャ</span></p>
  </td>
  <td width=227 valign=top style='width:60.0mm;border:solid windowtext 1.0pt;
  border-left:none;padding:0mm 5.4pt 0mm 5.4pt;height:26.5pt'>
  <p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向</span></p>
  </td>
  <td width=189 valign=top style='width:50.0mm;border:solid windowtext 1.0pt;
  border-left:none;padding:0mm 5.4pt 0mm 5.4pt;height:26.5pt'>
  <p class=MsoNormal><span style='font-family:メイリオ'>機能</span><span lang=EN-US>/</span><span
  style='font-family:メイリオ'>データ分離指向</span></p>
  </td>
 </tr>
 <tr style='height:26.5pt'>
  <td width=170 valign=top style='width:127.55pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:26.5pt'>
  <p class=MsoNormal><span style='font-family:メイリオ'>手法</span></p>
  </td>
  <td width=227 valign=top style='width:60.0mm;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:26.5pt'>
  <p class=MsoNormal><span lang=EN-US>OOD/OOA</span><span style='font-family:
  メイリオ'>、</span><span lang=EN-US>OMT</span><span style='font-family:メイリオ'>、</span><span
  lang=EN-US>OOSE</span></p>
  </td>
  <td width=189 valign=top style='width:50.0mm;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:26.5pt'>
  <p class=MsoNormal><span lang=EN-US>SADT</span><span style='font-family:メイリオ'>、</span><span
  lang=EN-US>RDD</span><span style='font-family:メイリオ'>、</span><span lang=EN-US>SA/SD</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761471"></a><a name="_Toc171537159"><span lang=EN-US>1.3 </span>アーキテクチャとは</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　オブジェクト指向とは、ソフトウエア開発の中のアーキテクチャに位置付けられます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>機能</span><span lang=EN-US>/</span><span
style='font-family:メイリオ'>データ分離指向アーキテクチャ</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>オブジェクト指向アーキテクチャ</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アーキテクチャとは、もともとは建築学における設計技術や建築様式のことです。コンピュータの世界では、設計思想などを意味します。システム・アーキテクチャ、アプリケーション・アーキテクチャ、ハードウエア・アーキテクチャ、</span><span
lang=EN-US>CPU</span><span style='font-family:メイリオ'>アーキテクチャなど。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span lang=EN-US
style='font-family:メイリオ'>Von Neumann</span><span style='font-family:メイリオ'>アーキテクチャ</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（オブジェクト指向アーキテクチャとは異なる）「機能とデータを分離するアーキテクチャ」は、</span><span
lang=EN-US>Von Neumann</span><span style='font-family:メイリオ'>アーキテクチャに起源しています。機能とデータを分離する構造は、ハードウエアの構造（メモリ、中央制御装置、演算ユニット、入力、出力の</span><span
lang=EN-US>5</span><span style='font-family:メイリオ'>要素構成）にうまく適合した設計思想です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>機械語以来、高レベルの言語においても「プログラムとは、メモリ内にあるデータを操作するための制御文で構成され、目的の結果を得るもの」という考え方があります。この考え方が、上流工程の分析、設計においても、機能中心法として使われてきました。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761472"></a><a name="_Toc171537160"><span lang=EN-US>1.4 </span>手法とは</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>あるアーキテクチャによるソフトウエアの開発手続きや手順です。様々な手法が提唱されています。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>1.4.1 </span>オブジェクト指向アーキテクチャ」による手法の例</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
OOSE</span><span style='font-family:メイリオ'>：オブジェクト指向ソフトウエア工学</span><span
lang=EN-US>OOSE(1987) Ivar Jacobson</span><span style='font-family:メイリオ'>他</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
OOSA:</span><span style='font-family:メイリオ'>オブジェクト指向システム分析（</span><span
lang=EN-US>1988</span><span style='font-family:メイリオ'>）</span><span lang=EN-US>Shlaer,
Mellor</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
OOA/OOD</span><span style='font-family:メイリオ'>：オブジェクト指向分析</span><span
lang=EN-US>(1990) Peter Coad, Ed Yourdon</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Booch</span><span style='font-family:メイリオ'>法：オブジェクト指向分析と設計</span><span
lang=EN-US>(1990) Grady Booch</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US> OMT</span><span
style='font-family:メイリオ'>：オブジェクトモデル化技法</span><span lang=EN-US>(1991) Rumbaugh</span><span
style='font-family:メイリオ'>他</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>1.4.2 </span>機能<span lang=EN-US>/</span>データ分離指向アーキテクチャ」による手法の例</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
SADT</span><span style='font-family:メイリオ'>：</span><span lang=EN-US>Structured
Analysis and Design Technique</span><span style='font-family:メイリオ'>；構造化分析</span><span
lang=EN-US>/</span><span style='font-family:メイリオ'>設計技法</span><span lang=EN-US>(1985)
Ross</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US> RDD</span><span
style='font-family:メイリオ'>：</span><span lang=EN-US>Requirement Driven Design
based on SREM</span><span style='font-family:メイリオ'>；</span><span lang=EN-US>SREM</span><span
style='font-family:メイリオ'>を使った要求駆動型設計</span><span lang=EN-US>(1985) Alford</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
SA/SD</span><span style='font-family:メイリオ'>：</span><span lang=EN-US>Structured
Analysis and Structure Design</span><span style='font-family:メイリオ'>；構造化分析</span><span
lang=EN-US>/</span><span style='font-family:メイリオ'>構造化設計</span><span lang=EN-US>(1979)
Yordon</span><span style='font-family:メイリオ'>他</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761473"></a><a name="_Toc171537161"><span lang=EN-US>1.5 </span>プロセスとは</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>手法は机上レベルの理論。プロセスとは、手法を実際のシステム開発の現場でも適用できるレベルにまで具体化したものです。プロセスの目的は、誰が行っても同じ品質、同じ結果が得られることです。</span></p>

<p class=MsoNormal><span lang=EN-US>5</span><span style='font-family:メイリオ'>人規模のプロジェクトに適用するプロセスと、</span><span
lang=EN-US>100</span><span style='font-family:メイリオ'>人規模に適用するプロセスは同じとは限りません。会社毎、部署毎、プロジェクト毎に使用する開発標準などがこれに相当します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761474"></a><a name="_Toc171537162"><span lang=EN-US>1.6 </span>ツールとは</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>各アーキテクチャに基づいた（あるいは適した）開発環境やデータベース、プログラミング言語などがあり、使用するアーキテクチャに合わせて選択する必要があります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761475"></a><a name="_Toc171537163"><span lang=EN-US>1.7 </span>アプローチとは</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アプローチという言葉もアーキテクチャ、方法論、手法といった意味で使われます。よく取り上げられるものとして次の３つがあります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>1.7.1 </span>プロセス中心アプローチ（<span lang=EN-US>POA</span>：<span
lang=EN-US>Process Oriented Approach</span>）</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>まず機能に着目し、システム全体を処理（プロセス）の集まりとしてモデル化します。データ形式は、各処理に合わせる形で決定します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>1.7.2 </span>データ中心アプローチ（<span lang=EN-US>DOA</span>：<span
lang=EN-US>Data Oriented Approach</span>）</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>要求される機能はシステム毎や時間の経過とともに変化します。それに対して、基盤となるデータは安定しています。この点に着目したアプローチが</span><span
lang=EN-US>DOA</span><span style='font-family:メイリオ'>です。最初に基盤となるデータ構造を決め、各処理は決められたデータ構造を前提に設計します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>1.7.3 </span>オブジェクト中心アプローチ（<span lang=EN-US>OOA</span>：<span
lang=EN-US>Object Oriented Approach</span>）</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトとそれらの相互作用としてシステムをモデル化します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>DOA</span><span style='font-family:メイリオ'>と</span><span
lang=EN-US>OOA</span><span style='font-family:メイリオ'>については、オブジェクト指向技術の広がり、特に業務システム分野での適用事例の増加とともに、様々な議論があります。例えば、</span><span
lang=EN-US>DOA</span><span style='font-family:メイリオ'>と</span><span lang=EN-US>OOA</span><span
style='font-family:メイリオ'>を対立させる考え方、あるいは</span><span lang=EN-US>DOA</span><span
style='font-family:メイリオ'>を</span><span lang=EN-US>OOA</span><span
style='font-family:メイリオ'>の一部ととらえる考え方などがあります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761476"></a><a name="_Toc171537164"><span lang=EN-US>1.8 </span>パラダイムシフトとは</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>従来型の開発技法に習熟した技術者がオブジェクト指向技術を習得しようとする場合、ソフトウエア開発の広い範囲において、それまでの考え方などを切り替えなければならないポイントがあります。この切り替えをパラダイムシフトと呼びます。スムーズにパラダイムシフトできる場合もありますが、時間がかかるケースの方が多いようです。しかし、これを避けてはオブジェクト指向技術を活用することはできません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例えば、「銀行口座」という言葉から、「銀行口座テーブル」を思い浮かべるのか、あるいは「銀行口座オブジェクト」を思い浮かべるのか、この切り替えが必要です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761477"></a><a name="_Toc171537165"><span lang=EN-US>1.9 </span>オブジェクト指向技術の出現</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>最初はプログラミング言語を中心に発展してきました。（１９８０年代）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Smalltalk  XEROX PARC</span><span style='font-family:メイリオ'>研究所</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
C++  AT&amp;T</span><span style='font-family:メイリオ'>ベル研究所</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Eiffel  Bertrand Mayer</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
CLOS  Common Lisp Object Sysytem</span><span style='font-family:メイリオ'>，</span><span
lang=EN-US>X3J13 ANSI Lisp</span><span style='font-family:メイリオ'>標準化</span><span
lang=EN-US>G</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761478"></a><a name="_Toc171537166"><span lang=EN-US>1.10 </span>方法論の出現</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　１９９０年代に入り、方法論（手法の研究）が提唱され、一般のシステム開発（ビジネス・アプリケーションの開発など）にも適用しやすくなりました。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761479"></a><a name="_Toc171537167"><span lang=EN-US>1.11 </span>オブジェクト指向技術に期待できるもの</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>開発方法の工業化（部品、コンポーネントの利用）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>自動車分野では新型車の場合でも部品の再利用率は</span><span
lang=EN-US>80</span><span style='font-family:メイリオ'>％程度と言われています。再利用がなければ、高い品質や信頼性を実現・維持することは難しいでしょう。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>このような仕組みは、ソフトウエア開発においても必要であり、次のような効果をもたらします。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>部品単位での信頼性の確保</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>システム全体としての品質向上</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>短期開発</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>コスト削減</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>属人性の低減、</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全体を部品（オブジェクト）で構成するというアプローチはオブジェクト指向と一致します。オブジェクト指向技術によってソフトウエア産業においても自動車産業のような工業化が進むでしょう。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>当然、再利用されるような部品（オブジェクト）を作るためには、そのオブジェクトが属する世界（ドメイン）に関する深い知識やオブジェクト設計スキルが必要です。優れたオブジェクトは誰からも理解されやすく、使いやすいものです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>1.11.1 </span>パターン（設計、実装の定石）の利用</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ソフトウエア開発に要するコストの大部分は、多くのプロジェクトや開発者が同じような間違いを繰返すために生じるコストだと言われています。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>パターンを利用すれば、同じような試行を繰返す必要はなくなり、（間違うことも大事な経験ですが）その分のコストを削減できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>広く知られたパターンは高度に洗練されており、信頼できます。優れたパターンを取り入れることで開発期間が短縮され、品質に関しても安心できます。これは、そのパターンの範囲だけではなく、その周辺にも良い効果が得られると思います。また、開発者のスキルアップも最短距離で行えます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>パターンには、ある企業内部や個人で使用されているものもありますが、オープンソース・ソフトと同じように公開されているものも数多くあります。</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>や</span><span
lang=EN-US>C#</span><span style='font-family:メイリオ'>が普及した現在、パターンの利用も広まっています。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>パターンによる信頼性の向上や開発コストの削減効果は、オブジェクト指向技術がもたらした大きな恩恵の</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>つです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>分析パターン</span><span lang=EN-US> (Analysis Patterns:
Reusable Object Models, 1997, Martin Fowler)</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>設計パターン</span><span lang=EN-US> (Design Patterns:
Elements of Reusable Object-Oriented Software, 1995, Erich Gamma</span><span
style='font-family:メイリオ'>他</span><span lang=EN-US>) </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h1><a name="_Toc173761480"></a><a name="_Toc171537168"><span lang=EN-US>2． </span>オブジェクト指向技術の主要な概念</a></h1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>本章では、オブジェクト指向分析、設計、プログラミングで用いられる主要な概念について説明します。これらの概念に対する理解は、実戦を重ねる中で深めていく必要があります。しかし、基本的な知識もなく実戦を重ねても効果はありません。ここに挙げた概念は、モデリングをする時だけではなく、実装（プログラミング）する際にも必要な知識です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761481"></a><a name="_Toc171537169"><span lang=EN-US>2.1 </span>オブジェクト</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの代表格は、現実の問題領域（アプリケーション・ドメインやシステム化対象領域）に存在する「モノ」です。また、私たちが自然に「モノ」として考える対象物以外にも、たくさんのオブジェクトがあります。これらを見分ける技術は、オブジェクトを抽出するという経験を重ねることで向上します。また、パターンを学習したり、他の人が作った優れたオブジェクトモデル（オブジェクトの集まり）を知ることで、より早く正しい方向で習得できます。自己流だけや、間違った経験を重ねるよりも、はるかに効率的です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>抽出したオブジェクトは、現実の世界よりも、はるかに多くのリスポンシビリティ（</span><span
lang=EN-US>responsibilities</span><span style='font-family:メイリオ'>責務）を持つようになります。例えば、</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>冊の書籍（オブジェクト）に、その書籍名を問うと、その書籍は自分の書籍名を応答する（責務を持つ）ようになります。この辺りは、現実の世界と全く同じではありませんが、オブジェクト指向システムの中では、それぞれのオブジェクトは、まるで人間であるかのように振舞います。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>銀行の預金口座を管理するシステムを構築するとします。その問題領域（ドメイン、システム化対象領域）には、</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>さんの普通預金口座や</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>さんの普通預金口座、</span><span
lang=EN-US>C</span><span style='font-family:メイリオ'>さんの定期預金口座などのオブジェクトがあります。各オブジェクトは、残高など自分の状態（情報）を知っています。</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>さんが自分の普通預金口座から預金を引き出すと、</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>さんの普通預金口座の状態（残高）が変化します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>社内の書籍を管理するシステムを構築するとします。それぞれの書籍は、いくつか在る書棚の</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>つに収納されています。ある書棚に問い合わせると、その書棚に収納されている全ての書籍のリストを応答します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761482"></a><a name="_Toc171537170"><span lang=EN-US>2.2 </span>オブジェクトを使ってモデル化する</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>システムは、オブジェクトの集りとしてモデル化します。各オブジェクトが、自分に割り当てられた責務を果たすことで、全体として、システム要件を満たしていきます。システムは、あるオブジェクトが他のオブジェクトにメッセージを送り始めたときに始動します。「メッセージを送る」とは、他のオブジェクトに対して、ある責務の遂行（仕事）を依頼することです。</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>プログラミング的に言えば、あるメソッドを使用することです。（従来型のプログラミング的には、ある関数を呼び出すことです）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>(</span><span style='font-family:メイリオ'>オブジェクトの例）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>預金者オブジェクト</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>普通預金口座オブジェクト</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>定期預金口座オブジェクト</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>普通預金口座番号オブジェクト</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>支店オブジェクト</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>預入れ取引きオブジェクト</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>引き出し取引きオブジェクト</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761483"></a><a name="_Toc171537171"><span lang=EN-US>2.3 </span>クラス</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトを使ってモデル化したシステムを、コンピュータ上で動かすためには、各オブジェクトをソフトウエアで実現する必要があります。</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>はクラスベースという</span><span
lang=EN-US>OOP</span><span style='font-family:メイリオ'>スタイルを導入します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラスベースとは、クラスをもとにインスタンス（オブジェクト）を生成するスタイルです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例えば、</span><span lang=EN-US>A</span><span
style='font-family:メイリオ'>さんの普通預金口座、</span><span lang=EN-US>B</span><span
style='font-family:メイリオ'>さんの普通預金口座、２つのオブジェクトがあります。この</span><span lang=EN-US>2</span><span
style='font-family:メイリオ'>つのオブジェクトは別々のものです。しかし、共通する性質（属性）があります。例えば、ともに残高という状態をもつこと、ともに預金者という状態をもつこと等です。もちろん、残高の金額そのものや、預金者は異なります。この共通した性質を定義したものが、クラスです。そして、このクラス（仕様や雛型とも呼ばれます）をもとに、コンピュータ上で、ソフトウエア的に生成されたものがインスタンスです。このインスタンスが現実のオブジェクトに対応します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>下図は、クラスとオブジェクトです。左側が</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>クラス図、右側の２つは</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>オブジェクト図です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　</span><span lang=EN-US><img
width=505 height=206 id="図 1" src="OOT.files/image001.png"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>以下に、普通預金口座クラスの</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>コードの例を示します。</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>クラス図の記法や</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>の文法の詳細については、ここでは触れません。ただ、２つの形がよく似ている点に着目してください。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chap2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>普通預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>普通預金口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>普通預金口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>預金者</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private long </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>預入れる</span><span lang=EN-US>(long </span><span
style='font-family:メイリオ'>預入れ額</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          //</span><span style='font-family:
メイリオ'>預入れ処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>引き出す</span><span lang=EN-US>(long </span><span
style='font-family:メイリオ'>引き出し額</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          //</span><span style='font-family:
メイリオ'>引き出し処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>解約する</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          //</span><span style='font-family:
メイリオ'>解約処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>次は、インスタンスを生成するための</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>のコード例です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>普通預金口座　</span><span
lang=EN-US>kouza = new</span><span style='font-family:メイリオ'>普通預金口座</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>必要な性質（属性）はどれか？それは問題領域によって異なります。預金口座を管理するというシステムでは、各預金者が持っている通帳の色やデザインは無視して良いかもしれません。もし、完全なオブジェクトをソフトウエアで容易に実現できるのであれば迷う必要はありません。すべての性質を持ったクラスを定義すればよいのです。しかし、それは現実的ではありません。通常は、必要な性質を識別し、クラスを定義することになります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>【補足】</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラスベース（</span><span
lang=EN-US>Class-Based</span><span style='font-family:メイリオ'>）はクラスをもとにオブジェクト（インスタンス）生成します（</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>や</span><span lang=EN-US>PHP</span><span
style='font-family:メイリオ'>）。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>プロトタイプベースは既存のオブジェクトから新しいオブジェクトを生成します（</span><span
lang=EN-US>JavaScript</span><span style='font-family:メイリオ'>）。ただ、</span><span
lang=EN-US>JavaScript</span><span style='font-family:メイリオ'>でも</span><span
lang=EN-US>class</span><span style='font-family:メイリオ'>構文を使うとクラスベースなプログラミングができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761484"></a><a name="_Toc171537172"><span lang=EN-US>2.4 </span>オブジェクトの追跡可能性</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>モデルとは、問題領域（システム化対象領域、ドメイン）やソフトウエアのある側面を表したものです。モデルには、分析モデルや設計モデル、実装モデル（ソースコード）などがあります。開発作業が進むとともにモデルは詳細になり、含まれるオブジェクトの数も増えていきます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向開発では、オブジェクトは追跡可能です。追跡可能とは、初期</span><span
lang=EN-US>(</span><span style='font-family:メイリオ'>前工程</span><span lang=EN-US>)</span><span
style='font-family:メイリオ'>のモデルにあったオブジェクトは、詳細化された次工程のモデルの中でも容易に識別できるという特徴です。つまり、分析モデルにあったオブジェクト（から定義されたクラス）は、ソースコードの中で容易に識別できます。例えば、普通預金口座オブジェクトは、分析モデルの中でも、実装モデル（ソースコード）の中でも、普通預金口座クラスとして、そのままの名前で存在します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>追跡可能性は、次のようなケースで有用です。例えば、ユーザーからの変更要求があったとします。その時、その変更内容を説明する文書や言葉の中には、オブジェクトの名前が使われているはずです。そして、それらの用語のほとんどが、オブジェクトとして抽出されてるはずです。また、変更内容は、あるオブジェクトのある振舞い（責務の遂行の仕方）に対する修正であることが多いでしょう。そのような場合、変更対象であるオブジェクトを、ソースコードの中で容易に識別できるのです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>もしも、追跡可能でない場合、ユーザーからの変更要求をソースコードに反映するためには、要求内容を翻訳する必要があります。つまり、要求内容にある用語ばどを、機能やデータの構造に置き換えて考え直さなければなりません。　（参照　後述の「現実とモデルの意味的乖離がなくなる」）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761485"></a><a name="_Toc171537173"><span lang=EN-US>2.5 </span>オブジェクトのアイデンティティ</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全てのオブジェクトは一意に識別されるアイデンティティ（識別子）を持っています。リレーショナル・データベース・モデルにおける（設計者が指定する）主キーのような概念とは別に、一意に識別できるアイデンティティがあります。オブジェクトはそれぞれ固有の存在として区別されます。オブジェクトの記述的な性質によって区別されるわけではありません。例えば、</span><span
lang=EN-US>Smalltalk</span><span style='font-family:メイリオ'>では２つの整数オブジェクトが同じ値であっても、それらは別のオブジェクトとして扱われます（同値と同一の違い）。</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>の場合、基本タイプについては、同値と同一が同じに扱われますが、例えば、</span><span
lang=EN-US>int</span><span style='font-family:メイリオ'>ではなく</span><span
lang=EN-US>Integer</span><span style='font-family:メイリオ'>を使用すれば同値と同一は区別されます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>普通預金口座クラスのインスタンスである</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>さんの普通預金口座インスタンスと、</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>さんの普通預金口座インスタンスは、普通預金口座番号ような情報がなくても一意に識別できるアイデンティティが、それぞれのインスタンスに対して、</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>プログラムの実行環境によって与えられます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761486"></a><a name="_Toc171537174"><span lang=EN-US>2.6 </span>オブジェクトを使う利点</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.6.1 </span>開発者、利用者共に理解しやすい</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトは実世界の“もの”に基づいています。そのため、設計されたモデルを元の実世界に対比して理解することができます。従って、利用者、発注者、分析・設計者、プログラマ、保守担当者にとって理解しやすく、関係者間でのコミュニケーション・ミスも生じにくいという利点があります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　また、他の開発者が、すでに開発されたオブジェクト（クラス）を再利用する場合にも、それが何であるかを理解しやすくなります。例えば、</span><span
lang=EN-US>GUI</span><span style='font-family:メイリオ'>の世界では、コンポーネント（オブジェクト）の再利用は常識です。それは、そのコンポーネントが何であるかを、他の開発者が理解しやすいからだと言えます。また、理解しやすいオブジェクトモデルになっているからです。</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>例えば、預金口座管理ドメインにおいても、普通預金口座のようなオブジェクト（クラス）が流通し、それを再利用することが一般的になれば、ソフトウエア開発の姿も大きく変わるでしょう。</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.6.2 </span>現実とモデルの意味的乖離がなくなる</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>機能指向やデータと機能をわける方法で設計されたモデルは、（要件定義書を除けば）利用者や発注者がそれを理解する事は困難です。これは、現実のモデルと意味的に乖離しているためです。また、利用者や発注者から新しい要求があった場合には、開発者はその要求を“機能とデータを分離した構造”に変換して考える必要があります。例えば、新しい要求は、幾つかのテーブルとプログラム群に対する要求に変換しなければなりません。さらに、この変換は属人的な作業になる場合が多く、結果（要求の実現方法）も様々になる可能性があります。つまり、担当者によって実現方法が違う場合も少なくありません。上述した追跡可能なモデルでは、新しい要求を意味的に乖離した構造に置き換える必要がなく、実現方法（変更するオブジェクト、クラス）も、必然的に決まるようになります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.6.3 </span>変更に強い</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>現実世界の“もの”は、システムの種類や要件に関わらず高い普遍性を持っています。つまり、システムの改版や、他システムで再利用する場合でも、適切にモデリングされたオブジェクトの責務や意味が大きく変わることはありません。また、変更が必要な場合にも、変更すべきオブジェクトは特定しやすく、正しくカプセル化（後述）されていれば変更箇所も局所化されます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.6.4 </span>リファクタリングしやすくなる（継続的な洗練を可能にします）</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>データと機能を分離したシステムよりもリファクタリングが容易になります。ただし、それなりの設計や経験は必要です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>「良いモデル」と「すこし無理があるモデル」もあるでしょう。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>Java 8 </span><span style='font-family:
メイリオ'>から日付・時刻の新しい</span><span lang=EN-US>API </span><span style='font-family:
メイリオ'>が追加されました。</span></p>

<p class=MsoNormal><span lang=EN-US>Instant, LocalTime, LocalDate,
LocalDateTime, ZonedDateTime </span><span style='font-family:メイリオ'>などです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これらは古い</span><span
lang=EN-US>API </span><span style='font-family:メイリオ'>である</span><span
lang=EN-US> Date, Calendar </span><span style='font-family:メイリオ'>などを改善したものです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>SpringSecurity</span><span
style='font-family:メイリオ'>（ライブラリ、フレームワーク）</span></p>

<p class=MsoNormal><span lang=EN-US>WebSecurityConfigurerAdapter </span><span
style='font-family:メイリオ'>が不要になったため、</span><span lang=EN-US>5.7</span><span
style='font-family:メイリオ'>で非推奨化、</span><span lang=EN-US>6.0</span><span
style='font-family:メイリオ'>で削除になりました。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>このように優秀な技術者が作成したモデルであってもリファクタリングが必要になってきます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761487"></a><a name="_Toc171537175"><span lang=EN-US>2.7 </span>オブジェクトを発見する</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.7.1 </span><span lang=EN-US>CRC</span>カード手法 （<span
lang=EN-US>Class, Resposibilities, Collaborators</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトを抽出するときの方法として、下図のような</span><span
lang=EN-US>CRC</span><span style='font-family:メイリオ'>カードを利用する方法があります。これは、</span><span
lang=EN-US>Smalltalk</span><span style='font-family:メイリオ'>の研究グループが、オブジェクト指向的</span>
<span style='font-family:メイリオ'>“思考方法”</span> <span style='font-family:メイリオ'>を伝えるために考案したものです。オブジェクトは単なるデータの格納庫ではない、という事を忘れないように構成されています。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CRC</span><span style='font-family:メイリオ'>カード</span><span
lang=EN-US> (</span><span style='font-family:メイリオ'>６インチ×４インチ</span><span
lang=EN-US>)</span><span style='font-family:メイリオ'>（約１５ｃｍ×１０ｃｍ）</span></p>

<p class=MsoNormal><span lang=EN-US><img width=442 height=300 id="図 2"
src="OOT.files/image002.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Class</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラス名を書きます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Responsibilities</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>属性やメソッドではなく、このクラスのリスポンスビリティ（責務）を書きます。（データの格納庫ではありません）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Collaborators</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>協力者となるクラスを書きます。これによって、クラス同士の関係が浮かび上がります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.7.2 </span>責務駆動設計<span lang=EN-US> [Wirfs-Brock</span>他<span
lang=EN-US> 1990]</span>　（参考）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アプリケーションをクラスとその責務、クラス間の協調によってモデル化する手法です。最初に、システム中のクラスやオブジェクトを識別し、次に、システムの責務を分析し、それらをシステム中のクラスに割振ります。　最後に、責務を満たすために必要なオブジェクト間の協調を、クラス間の協調として定義します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>このモデルを出発点に、クラス階層やサブシステムなどを設計します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761488"></a><a name="_Toc171537176"><span lang=EN-US>2.8 </span>カプセル化</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>カプセル化とは、あるオブジェクトにアクセスする方法は、公開されたインタフェースに従ったメッセージの送信だけで、それ以外は、外部から完全に隠蔽することです。あるオブジェクト</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>は、別のオブジェクト</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>のインタフェースを、公開された責務・振舞いとして、安心して使用できます。また、オブジェクト</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>も確実にその責務を果たすことを保証しなければなりません。その代わり、オブジェクト</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>が、オブジェクト</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>の内情について干渉することはできません。適切にモデリングされたオブジェクトは、分かり易いクラス名と分かり易いインタフェースを持ち、自然とカプセル化されるはずです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>(</span><span style='font-family:メイリオ'>例</span><span
lang=EN-US>)</span><span style='font-family:メイリオ'>普通預金口座クラスの公開されたインタフェースは、次の３つの責務・振舞いです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>預入れる</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>引き出す</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>解約する</span></p>

<p class=MsoNormal><span lang=EN-US><img width=150 height=167 id="図 3"
src="OOT.files/image003.png"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chap2_2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>普通預金口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     private static BigDecimal </span><span
style='font-family:メイリオ'>利率</span><span lang=EN-US> = new
BigDecimal(&quot;0.001&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>     private BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>; //</span><span
style='font-family:メイリオ'>ここではデータベースから復元した金額が設定されているものとします</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>預入れる</span><span lang=EN-US>(BigDecimal </span><span
style='font-family:メイリオ'>預入れ額</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          </span><span style='font-family:
メイリオ'>残高</span><span lang=EN-US> = </span><span style='font-family:メイリオ'>残高</span><span
lang=EN-US>.add(</span><span style='font-family:メイリオ'>預入れ額</span><span
lang=EN-US>); //BigDecimal</span><span style='font-family:メイリオ'>型の加算</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>引き出す</span><span lang=EN-US>(BigDecimal </span><span
style='font-family:メイリオ'>引き出し額</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          </span><span style='font-family:
メイリオ'>残高</span><span lang=EN-US> = </span><span style='font-family:メイリオ'>残高</span><span
lang=EN-US>.subtract(</span><span style='font-family:メイリオ'>引き出し額</span><span
lang=EN-US>); //BigDecimal</span><span style='font-family:メイリオ'>型の減算</span><span
lang=EN-US>  </span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>解約する</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          //</span><span style='font-family:
メイリオ'>解約処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span><span style='font-family:メイリオ'>（注）「引き出す」の中の残高不足処理などは省略します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>普通預金口座の残高は隠蔽されており、２つのインタフェース「預入れる」、「引き出す」以外から変更されることはありません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>解約処理は省略しています。無視してください。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>この例を、機能とデータを分離する場合と比較してみましょう。データはリレーショナル・データベースに格納されるものとします。その場合、普通預金口座テーブルの中に、</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>さんの普通預金口座情報と</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>さんの普通預金口座情報が格納されることになるでしょう。普通預金口座テーブルの「残高」列の値を更新する機能（プログラム）の数は</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>つではないかもしれません。その場合、更新の仕方（ルール）は各プログラムに分散します。ルールが変われば、変更箇所は複数になります。そして、正しく更新するか否かは、各プログラムに依存してしまいます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>一方、カプセル化された「残高」は、そのオブジェクトの決まったインタフェースを使わなければ更新されることはありません。更新の仕方が分散することもありません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761489"></a><a name="_Toc171537177"><span lang=EN-US>2.9 </span>属性</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>属性は、主に責務の遂行に必要な、ある状態を保持するために使用されます。例えば、普通預金口座オブジェクトは、その責務“引き出す”を遂行するために、属性“残高”を持っています。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>補足：「プロパティ」と呼ばれるものと多くの文脈で同義です。</span><span
lang=EN-US>C#.net</span><span style='font-family:メイリオ'>では別の意味で使用されます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.9.1 </span>インスタンス属性とクラス属性</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　属性には、インスタンス属性とクラス属性があります。インスタンス属性はインスタンス毎に固有の状態を保持します。クラス属性は、クラス毎に固有の状態を保持します。インスタンス属性がインスタンスの数だけ存在するのに対し、あるクラスのクラス属性は、そのクラスに１つだけ存在します。クラスに属性は、そのクラスの全てのインスタンスに共通な状態を保持します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>(</span><span style='font-family:メイリオ'>例</span><span
lang=EN-US>)</span><span style='font-family:メイリオ'>普通預金口座クラスの各インスタンスは、それぞれ自分の残高を保持します。残高は、インスタンス毎に異なる状態だからです。一方、普通預金利率は、普通預金口座の全てのインスタンスに共通だとすると、この普通預金利率は、各インスタンスがそれぞれ保持するよりも、普通預金口座クラスに１つ保持されるのが自然です。この場合の普通預金利率は、クラス属性です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.9.2 </span>属性、操作を<span lang=EN-US>UML</span>で記述する</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=315 height=175 id="図 5"
src="OOT.files/image004.png"></span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>※先頭の</span><span lang=EN-US>
+ </span><span style='font-family:メイリオ'>は</span><span lang=EN-US>public</span><span
style='font-family:メイリオ'>、‐</span> <span style='font-family:メイリオ'>は</span><span
lang=EN-US>private</span><span style='font-family:メイリオ'>。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>※下線は</span><span lang=EN-US>static</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>※</span><span lang=EN-US>UML</span><span
style='font-family:メイリオ'>に準拠する、しないというよりも使用するツールに従うことになります。本書は</span><span
lang=EN-US>Visio2010</span><span style='font-family:メイリオ'>です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>※</span><span lang=EN-US>setter,
getter</span><span style='font-family:メイリオ'>メソッドは省略する場合が多い。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761490"></a><a name="_Toc171537178"><span lang=EN-US>2.10 </span>オブジェクト、クラス、インスタンス</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.10.1 </span>オブジェクトからクラスを定義する</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラスとは、似たような振る舞いと情報構造をもつオブジェクトを定義（抽象化）したものです。コンピュータ上でオブジェクト（インスタンス）を生成するためには、クラス（インスタンスの定義情報）が必要になります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.10.2 </span>似たような…の基準</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>現実の世界に準じるべきです。例えば、</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>さんの普通預金口座オブジェクトと</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>さんの普通預金口座オブジェクトから普通預金口座クラスが定義できそうです。しかし、</span><span
lang=EN-US>A</span><span style='font-family:メイリオ'>さんの普通預金口座オブジェクトと</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>さんの所有する自動車オブジェクトからクラスを導出するケースは少ないかもしれません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>目的や基準を間違うと、分かり難いクラスが導出されてしまいます。このようなクラスは、生産性や品質を低下させることにもつながります。例えば、実装時に差分プログラミングの効果に着目するあまり、不自然なクラスや継承を追加してしまい、分析・設計時にはなかった分かり難いクラスが現れるため、オブジェクトの追跡が困難になり、変更に弱く、保守しにくいモデルになることがあります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761491"></a><a name="_Toc171537179"><span lang=EN-US>2.11 </span>オブジェクトとインスタンス</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ほぼ同義語ですが、使い分けの例としては、「オブジェクトは、実世界を分析して得たもの（例：</span>
<span style='font-family:メイリオ'>個人顧客、法人顧客、顧客番号、…）で、インスタンスは、コンピュータ上のプログラムによってクラスから生成されたものです。（例：</span><span
lang=EN-US> Customer customer = new Customer(</span><span style='font-family:
メイリオ'>“</span><span lang=EN-US>murayama</span><span style='font-family:メイリオ'>”</span><span
lang=EN-US>,</span><span style='font-family:メイリオ'>”</span><span lang=EN-US>C0001</span><span
style='font-family:メイリオ'>”</span><span lang=EN-US>);</span><span
style='font-family:メイリオ'>）」という分け方があります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全てのオブジェクトは、あるクラスに属する</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>インスタンスは、クラスから生成されるオブジェクトです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>生成されたインスタンスは、そのクラスの振舞いと情報構造を持ちます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.11.1 </span>クラスとタイプ（型）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>型はインタフェースだけを定義したものです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>クラスはインタフェースの実装を含むものです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>型仕様と、型のために定義された実装を結合したものをクラスとします。（ＯＤＭＧ）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
CORBA IDL</span><span style='font-family:メイリオ'>はタイプを定義します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Java</span><span style='font-family:メイリオ'>では（</span><span lang=EN-US>abstract</span><span
style='font-family:メイリオ'>）</span><span lang=EN-US>class</span><span
style='font-family:メイリオ'>定義と</span><span lang=EN-US> interface</span><span
style='font-family:メイリオ'>定義があります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Java</span><span style='font-family:メイリオ'>のインタフェース（</span><span lang=EN-US>interface</span><span
style='font-family:メイリオ'>）は、</span><span lang=EN-US>public</span><span
style='font-family:メイリオ'>メソッドと定数のみを定義します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Java</span><span style='font-family:メイリオ'>の抽象クラス（</span><span lang=EN-US>abstract
class</span><span style='font-family:メイリオ'>）は、メソッドの一部を定義することもできます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
protected, static</span><span style='font-family:メイリオ'>メソッドを持つことができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761492"></a><a name="_Toc171537180"><span lang=EN-US>2.12 </span>オブジェクトの候補</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>「オブジェクト指向システム分析」シュレィアー／メラーよる例（すこし古典的）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.12.1 </span>有形物</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>人、商品、伝票</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.12.2 </span>役割 </h3>

<p class=MsoNormal><span style='font-family:メイリオ'>人や構成により演じられる役割</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>医師、患者、顧客、従業員</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>医師は患者にもなる</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.12.3 </span>出来事</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>飛行、事故、故障、サービス要求</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.12.4 </span>相互作用</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>買い入れ、結婚</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.12.5 </span>仕様</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>製品などの仕様</span></p>

<p class=MsoNormal><span lang=EN-US><img width=507 height=224 id="図 6"
src="OOT.files/image005.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761493"></a><a name="_Toc171537181"><span lang=EN-US>2.13 </span>クラス図</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトタイプとそれらの間に存在する静的な関係を記述したものです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>静的な関係には</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>関連</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>継承</span> <span style='font-family:メイリオ'>（サブタイプはインタフェースの継承、サブクラスは実装の継承）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>があります。</span></p>

<p class=MsoNormal><span lang=EN-US><img width=524 height=531 id="図 7"
src="OOT.files/image006.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラス図を書くときは、リスポンシビリティ指向ではなく、データ指向のクラスモデルにならないように注意します。　［注意］</span><span
lang=EN-US> ER</span><span style='font-family:メイリオ'>図</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.1 </span>汎化、一般化（クラス間の関係）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>汎化（一般化）はクラス間の関係を表わします。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>いくつかのクラスに共通な性質を抜き出し、より一般的なクラスを作ることができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>より一般的なクラスを継承関係の上位に置き、もとのクラスで継承し共有することができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>何が類似し、何が異なるかを簡潔に捉えることで、モデル化を容易にし分かりやすくできます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>何が共通な性質であるかは、実世界の基準に基づかなくてはなりません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>モデルを分かりやすくすることが目的です。単なる共通部の抽出を目的とした継承や多階層の継承はモデルを分かりにくくし、劣化させます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.2 </span>継承</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>あるクラス（スーパークラス）の責務を拡張するための仕組みです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>プログラミング言語でのコード再利用を示す。（差分プログラミング）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.3 </span>特化、特殊化</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>あるクラスの特性を継承し、必要な操作と情報構造を追加して、新しいクラスを作ることです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>親のクラスの操作や情報構造を、再定義または削除することもできます。（振舞い互換でない）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース１：</span><span lang=EN-US>&lt;</span><span
style='font-family:メイリオ'>拡張</span><span lang=EN-US>&gt; </span><span
style='font-family:メイリオ'>新たに属性やメソッドを追加する。</span></p>

<p class=MsoNormal><span lang=EN-US>        </span><span style='font-family:
メイリオ'>クラスＡが使われている場所で、クラスＡの子孫が利用できるとき、振舞い互換という。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース２：継承したデータやメソッドを置き換える。（オーバーライドする）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース３：</span><span lang=EN-US>&lt;</span><span
style='font-family:メイリオ'>制限</span><span lang=EN-US>&gt; </span><span
style='font-family:メイリオ'>継承したインタフェースの一部を取り除く。（あまり使用しない。例：</span><span
lang=EN-US>private</span><span style='font-family:メイリオ'>にする等。）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.4 </span>クラス図の例</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>名義人、口座番号、残高、開設日は普通預金口座と定期預金口座に共通の属性です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>「口座番号を応答する」は普通預金口座と定期預金交差に共通の操作です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>「入金する」と「引き出す」は共通の操作ではありません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>定期預金口座には属性として満期日が必要です。（普通預金口座にはありません）</span></p>

<p class=MsoNormal><span lang=EN-US><img width=360 height=302 id="図 8"
src="OOT.files/image007.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.5 </span><span lang=EN-US>Java</span>ソースの例</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>このサンプルはコンパイル確認までで、実行していません。</span></p>

<p class=MsoNormal><span lang=EN-US>*/</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chap2_3;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.LocalDate;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>預金口座クラス</span><span
lang=EN-US> (</span><span style='font-family:メイリオ'>抽象クラス</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public abstract class </span><span
style='font-family:メイリオ'>預金口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private LocalDate </span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>コンストラクタ</span></p>

<p class=MsoNormal><span lang=EN-US>     public </span><span style='font-family:
メイリオ'>預金口座</span><span lang=EN-US>(</span></p>

<p class=MsoNormal><span lang=EN-US>               String </span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               LocalDate </span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public String getAccountNumber() { //</span><span
style='font-family:メイリオ'>口座番号を応答する</span></p>

<p class=MsoNormal><span lang=EN-US>          return </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chap2_3;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.LocalDate;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>普通預金口座</span><span lang=EN-US> extends </span><span style='font-family:
メイリオ'>預金口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>コンストラクタ</span></p>

<p class=MsoNormal><span lang=EN-US>     public </span><span style='font-family:
メイリオ'>普通預金口座</span><span lang=EN-US>(</span></p>

<p class=MsoNormal><span lang=EN-US>               String </span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               BigDecimal </span><span
style='font-family:メイリオ'>残額</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               LocalDate </span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          super(</span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>, </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>, </span><span
style='font-family:メイリオ'>残額</span><span lang=EN-US>, </span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>          //</span><span style='font-family:
メイリオ'>この例では預金口座クラスのコンストラクタを呼び出すだけ</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void deposit(int p_amount) {</span></p>

<p class=MsoNormal><span lang=EN-US>          // </span><span style='font-family:
メイリオ'>普通預金口座の場合の入金処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void withdraw(int p_amount) {</span></p>

<p class=MsoNormal><span lang=EN-US>          // </span><span style='font-family:
メイリオ'>普通預金口座の場合の引出し処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chap2_3;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.LocalDate;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>定期預金口座クラス</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>定期預金口座</span><span lang=EN-US> extends </span><span style='font-family:
メイリオ'>預金口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     private LocalDate </span><span
style='font-family:メイリオ'>満期日</span><span lang=EN-US>; //</span><span
style='font-family:メイリオ'>定期預金だけの属性</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>コンストラクタ</span></p>

<p class=MsoNormal><span lang=EN-US>     public </span><span style='font-family:
メイリオ'>定期預金口座</span><span lang=EN-US>(</span></p>

<p class=MsoNormal><span lang=EN-US>               String </span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               BigDecimal </span><span
style='font-family:メイリオ'>残額</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               LocalDate </span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>               LocalDate </span><span
style='font-family:メイリオ'>満期日</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          super(</span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>, </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>, </span><span
style='font-family:メイリオ'>残額</span><span lang=EN-US>, </span><span
style='font-family:メイリオ'>開設日</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>満期日</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>満期日</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void deposit(int p_amount) {</span></p>

<p class=MsoNormal><span lang=EN-US>          // </span><span style='font-family:
メイリオ'>定期預金口座の場合の入金処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void withdraw(int p_amount) {</span></p>

<p class=MsoNormal><span lang=EN-US>          // </span><span style='font-family:
メイリオ'>定期預金口座の場合の引出し処理</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.6 </span>クラスと具象クラス</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>抽象クラスはインスタンスを持ちません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>具象クラスはインスタンスを持つことができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.7 </span>スーパークラスとサブクラス</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>スーパークラスは特殊化のもとになるクラス、サブクラスは特殊化された結果のクラスです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>クラス階層をより分かりやすく、捉えやすくするためにクラス階層を作成することができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>再利用しやすくするためにクラス階層を作成することができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>差分プログラミングの効果を出すためにクラス階層を作成することができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.8 </span>継承を考えるときの注意点</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>共通関数やデータの正規化が目的ではありません。（データ指向、プロセス指向で混乱しない）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>開発が進むにしたがって、新しいクラスが必要になることがありますが、スパゲッティ継承に注意します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>新しいクラスの追加は、クラス階層の変更を伴うこともあるので、最適なモデル、変更負荷、重要度等を検討し、結果として再構成することもありえます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>委譲を使うべきかを検討します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>2.13.9 </span>多重継承</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>２つ以上の既存クラスの性質を利用できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>オブジェクトが演じる役割をモデル化する場合に適切です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>→</span> <span style='font-family:メイリオ'>オブジェクトの候補の役割オブジェクト</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>オブジェクト記述を再利用できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Java</span><span style='font-family:メイリオ'>は単一継承のみです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>多重継承では問題点も多く指摘されています。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>（問題点）クラス階層が複雑で理解し難くなります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>（問題点）２つの親クラスが同じ名前の操作を持つ場合など理解し難くなります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>（問題点）反復継承は複雑になります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=402 height=237 id="図 4"
src="OOT.files/image008.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.10 </span>単一分類と多重分類</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>分類（</span><span lang=EN-US>classification</span><span
style='font-family:メイリオ'>）とは、オブジェクトとそのタイプとの関係を示します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>ほとんどのオブジェクト指向プログラミング言語では、単一の静的分類です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>単一分類では、オブジェクトはスーパータイプから継承する単一のタイプに属します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>多重分類では、オブジェクトを、継承の関係を持つ必要のない複数のタイプで記述できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>（多重継承とは、複数のスーパータイプを持つタイプを定義できることで、各オブジェクトはある単一のタイプに分類されます。）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>2.13.11 </span>静的分類と動的分類</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>動的分類では、オブジェクトはサブタイプ構造内の範囲で、属するタイプを変更できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>静的分類では変更できません。（参考：アナリシスパターンのロールモデル）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=413 height=463 id="図 9"
src="OOT.files/image009.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.12 </span><span lang=EN-US>Java</span>のインタフェース</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US>
Java</span><span style='font-family:メイリオ'>は単一継承のみ可能です。（多重継承はできません）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>その代わりに、“実装は継承できませんが多重継承に準ずる”方法としてインタフェースがあります。</span> <span
style='font-family:メイリオ'>（注：</span><span lang=EN-US>abstract</span><span
style='font-family:メイリオ'>クラス）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.13 </span>継承の使用に適した場合</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>サブクラスは「何々の特別な種類」であって、「何々によって果たされる役割」ではない場合。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>オブジェクトはいったん分類されると、そのクラスのオブジェクトであり続ける場合。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.13.14 </span>継承ではなくコンポジションを利用すべき場合</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>継承を使うとクラス階層の上下でカプセル化が弱くなることが懸念される場合。（スーパークラスの変更がサブクラスに波及するなど）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>サブクラスを移り変わるオブジェクトをモデル化する場合。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>他のオブジェクトに振舞いを委譲することで責務を拡張すべき場合。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>[</span><span style='font-family:メイリオ'>参考文献　</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>オブジェクト設計　ピーター・コード＋マーク・メイフィールド</span><span
lang=EN-US>]</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761494"></a><a name="_Toc171537182"><span lang=EN-US>2.14 </span>クラス図と観点（<span
lang=EN-US>Martin Fowler,1997</span>）</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>[</span><span style='font-family:メイリオ'>参考文献　</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>モデリングのエッセンス　マーチン・ファウラー、ケンドール・シコット</span><span
lang=EN-US>]</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>モデルの開発は、概念的レベル、仕様レベル、実装レベルと洗練されます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>ダイアグラム、特にクラス図を作成する場合には、次の３つの観点のうちの、どの観点で作成するのか、どの観点で作成されたものかを常に認識しておく必要があります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.14.1 </span>概念的観点</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>問題ドメインにおける概念を表わすダイアグラムを作成します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>概念モデルは、それを実装するソフトウエアをほとんど無視して作成されるべきものです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761495"></a><a name="_Toc171537183"><span lang=EN-US>2.15 </span>仕様の観点</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>ソフトウエアの実装ではなく、インタフェースについて作成します。従ってクラスではなく、（実装を持たない）タイプについて作成することになります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.15.1 </span>実装の観点</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>実際にクラスを与えてその実装を明らかにします。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>ソースコードを作成します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:メイリオ'>※Martin Fowler</span><span
style='font-family:メイリオ'>氏は後に観点の導入は複雑過ぎたと述べています<span lang=EN-US>(</span>筆者の記憶違いかもしれません<span
lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:メイリオ'>※</span><span
style='font-family:メイリオ'>エリック・エバンス氏のドメイン駆動設計ではモデルは<span lang=EN-US>1</span>つを推奨しています</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>※観点という考え方を知ることは意味があると思います。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h2><a name="_Toc173761496"></a><a name="_Toc171537184"><span lang=EN-US>2.16 </span>関連（インスタンス間の関係）</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.16.1 </span>概念的観点</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>関連は方向性を持つ２つのロールを持ちます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>ロールの元になるクラスはソース、宛先になるクラスはターゲットです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>関連に関与するオブジェクトの数を多重度で表わします。</span></p>

<p class=MsoNormal><span lang=EN-US><img width=328 height=271 id="図 10"
src="OOT.files/image010.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.16.2 </span>仕様の観点</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>関連はリスポンシビリティを表わします。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例：</span> <span
style='font-family:メイリオ'>預金者クラスは開設済みの（</span><span lang=EN-US>0</span><span
style='font-family:メイリオ'>個以上の）口座番号を応答するメソッドを持ちます。</span></p>

<p class=MsoNormal><span lang=EN-US><img width=207 height=263 id="図 11"
src="OOT.files/image011.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>2.16.3 </span>実装の観点</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>関連は各クラスに参照または参照の集合が実装される事を示します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>実装の観点なので用語としては、オブジェクト識別子ではなく参照またはポインタで記述します。</span></p>

<p class=MsoNormal><span lang=EN-US><img width=357 height=286 id="図 12"
src="OOT.files/image012.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>package</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> oop.chap2_4;</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>&nbsp;</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>import</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'>
java.util.ArrayList;</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>&nbsp;</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>public</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> </span><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>class</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> </span><span
style='font-size:9.0pt;font-family:メイリオ;color:black'>預金者<span lang=EN-US> {</span></span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>    </span><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>private</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> ArrayList&lt;</span><span
style='font-size:9.0pt;font-family:メイリオ;color:black'>預金口座<span lang=EN-US>&gt; </span></span><span
style='font-size:9.0pt;font-family:メイリオ;color:#0000C0'>開設口座リスト</span><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'>;</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>    </span><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>public</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> </span><span
style='font-size:9.0pt;font-family:メイリオ;color:black'>預金者<span lang=EN-US>() {</span></span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>        </span><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>super</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'>();</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>        </span><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>this</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'>.</span><span
style='font-size:9.0pt;font-family:メイリオ;color:#0000C0'>開設口座リスト</span><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> = </span><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>new</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> ArrayList&lt;</span><span
style='font-size:9.0pt;font-family:メイリオ;color:black'>預金口座<span lang=EN-US>&gt;();</span></span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>    }</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>    </span><b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>public</span></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> ArrayList&lt;</span><span
style='font-size:9.0pt;font-family:メイリオ;color:black'>預金口座<span lang=EN-US>&gt;
get</span>開設口座リスト<span lang=EN-US>() {</span></span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>        </span><b><u><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:#7F0055'>return</span></u></b><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'> </span><span
style='font-size:9.0pt;font-family:メイリオ;color:#0000C0'>開設口座リスト</span><span
lang=EN-US style='font-size:9.0pt;font-family:メイリオ;color:black'>;</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>    }</span></p>

<p style='margin:0mm;margin-bottom:.0001pt;background:white'><span lang=EN-US
style='font-size:9.0pt;font-family:メイリオ;color:black'>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chap2_4;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>預金口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>    private String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>    private String </span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>    public </span><span style='font-family:
メイリオ'>預金口座</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>        this.</span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US> = &quot;&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>        this.</span><span style='font-family:
メイリオ'>名義人</span><span lang=EN-US> = &quot;&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public String get</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>        return </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public String get</span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>        return </span><span
style='font-family:メイリオ'>名義人</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.16.4 </span>誘導可能性（<span lang=EN-US>navigability</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>概念的観点のダイアグラムでは誘導可能性を示す矢印が必要な場合は多くありません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>単方向関連、双方向関連があります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>仕様や実装の観点では必要な定義であり、重要な意味を持ちます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>実装レベルでは、どちらのクラスに参照を持つか、両方のクラスに持つか等が決まります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US> UML</span><span
style='font-family:メイリオ'>では、矢印のない関連は誘導可能性が未知であるか、双方向である事を示します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.16.5 </span>静的関連・動的関連</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>静的関連：</span> <span style='font-family:メイリオ'>長期間にわたって存在する関連です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>動的関連：</span> <span style='font-family:メイリオ'>２つのオブジェクトが相互にやり取りしている関連です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>オブジェクト指向では、オブジェクトの視点から関連を見ます。仮に自分が、そのオブジェクトであるとして、他のオブジェクトをどのように参照しなければならないかを考えます。従って、関連は方向を持ちます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>データ中心のモデル化では２つのオブジェクトを（同時に見て）結合（</span><span
lang=EN-US>join</span><span style='font-family:メイリオ'>）するものとして関連を考えます。　従来の手法で関係データベースを用いる場合、オブジェクト間の関連は、外部キーと複数の表とのジョインで暗黙的に表わさています。オブジェクト指向では、関連は明示的に実装されます。通常は、クラスに実装されたインスタンス変数として存在します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761497"></a><a name="_Toc171537185"><span lang=EN-US>2.17 </span>集約とコンポジション</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.17.1 </span>集約</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>全体オブジェクト－部分オブジェクトの関係を表わします。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>集約と関連は区別しにくいことが多いです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）口座が解約（削除）された場合でも、取引は削除されません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.17.2 </span>コンポジション</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>より強い集約の一種です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>部分オブジェクトは唯一の全体オブジェクトに属します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>連鎖削除。全体オブジェクトを削除すると、連鎖的に部分オブジェクトも削除されます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>口座が解約（削除）されると取引も削除されます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761498"></a><a name="_Toc171537186"><span lang=EN-US>2.18 </span>制約</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>下図において、制約とは、</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>預金者は、０個以上の預金口座を持つこと。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>預金口座は、唯一の名義人（預金者）が所有すること。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>預金口座には、必ず口座番号があること。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>実体（オブジェクト、クラス、属性、関連）が取り得る値の範囲を示します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span><span lang=EN-US> UML</span><span
style='font-family:メイリオ'>での制約は、｛</span> <span style='font-family:メイリオ'>｝で囲まれた中に記述します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>構文は定義されていないので、自然言語、論理式等を使えます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>また、</span><span lang=EN-US>OMG</span><span
style='font-family:メイリオ'>で定義するオブジェクト制約言語</span><span lang=EN-US>OCL</span><span
style='font-family:メイリオ'>も使用できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>・</span> <span
style='font-family:メイリオ'>関連ロール、多重度を含め制約の表示は、クラス図の作成において、その大部分を占めます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=258 height=377 id="図 13"
src="OOT.files/image013.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761499"></a><a name="_Toc171537187"><span lang=EN-US>2.19 </span>多相性</a>（ポリモーフィズム）</h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.19.1 </span>用語</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>多態、ポリモーフィズムともいいます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.19.2 </span>定義</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>あるインスタンスが、別のインスタンスにメッセージを送る場合に、送り手のインスタンスが、受け手のインスタンスが属するクラスに関係なく、メッセージを送ることができ、異なるクラスに対しては、異なる振舞いをすること。</span>
<span style='font-family:メイリオ'>（受け手によってメソッド名を変えたり、パラメータを変えたりする必要がないこと）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>2.19.3 </span>制限付き多相性</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例：</span> <span
style='font-family:メイリオ'>開設口座に関連できるのは預金口座クラスとその子孫クラスのインスタンスであること。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜例＞</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>「開設口座リスト」に登録されている全ての預金口座を解約する場合を考えます。（</span><span
lang=EN-US>closeAllAccounts()</span><span style='font-family:メイリオ'>）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全ての預金口座を解約するためには、「開設口座リスト」に登録されている全てのオブジェクトに対して同じメッセージ「解約する」を送ればよいことになります。</span>
<span style='font-family:メイリオ'>受け手のオブジェクトが普通預金口座クラスか定期預金口座クラスに属するかを知る必要はありません。送られたメッセージ「解約する」は、受け手のオブジェクトがどのクラスに属しているかによって異なる振舞い（解約手続き）をします。この性質を多相性と呼びます。</span>
</p>

<p class=MsoNormal><span lang=EN-US><img width=515 height=221 id="図 14"
src="OOT.files/image014.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt2_5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>抽象クラスなのでインスタンスは存在しない</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public abstract class Account {</span></p>

<p class=MsoNormal><span lang=EN-US>    private String accountNumber; // </span><span
style='font-family:メイリオ'>口座番号</span></p>

<p class=MsoNormal><span lang=EN-US>    private Customer customer;</span></p>

<p class=MsoNormal><span lang=EN-US>    </span></p>

<p class=MsoNormal><span lang=EN-US>    /**</span></p>

<p class=MsoNormal><span lang=EN-US>     * </span><span style='font-family:
メイリオ'>実際には</span> <span style='font-family:メイリオ'>各コンストラクタには引数</span><span
lang=EN-US>(Customer</span><span style='font-family:メイリオ'>等</span><span
lang=EN-US>)</span><span style='font-family:メイリオ'>が必要と思われるが</span> <span
style='font-family:メイリオ'>この例題では省略する</span></p>

<p class=MsoNormal><span lang=EN-US>     */</span></p>

<p class=MsoNormal><span lang=EN-US>    public Account() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>        accountNumber = &quot;&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    </span></p>

<p class=MsoNormal><span lang=EN-US>    /**</span></p>

<p class=MsoNormal><span lang=EN-US>     * </span><span style='font-family:
メイリオ'>抽象メソッド</span><span lang=EN-US> close()</span></p>

<p class=MsoNormal><span lang=EN-US>     * @return</span></p>

<p class=MsoNormal><span lang=EN-US>     */</span></p>

<p class=MsoNormal><span lang=EN-US>    public abstract boolean close();</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt2_5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>普通預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class OrdinaryAccount extends
Account  {</span></p>

<p class=MsoNormal><span lang=EN-US>    public OrdinaryAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public boolean close() {</span></p>

<p class=MsoNormal><span lang=EN-US>        boolean result = true;</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>普通預金の解約チェックを行い、結果を</span><span lang=EN-US>result</span><span
style='font-family:メイリオ'>に設定する</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>解約できる場合のみ解約する</span></p>

<p class=MsoNormal><span lang=EN-US>        return result;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt2_5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>定期預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class FixedAccount extends Account 
{</span></p>

<p class=MsoNormal><span lang=EN-US>    public FixedAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public boolean close() {</span></p>

<p class=MsoNormal><span lang=EN-US>        boolean result = true;</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>定期預金の解約チェックを行い、結果を</span><span lang=EN-US>result</span><span
style='font-family:メイリオ'>に設定する</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>解約できる場合のみ解約する</span></p>

<p class=MsoNormal><span lang=EN-US>        return result;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt2_5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.ArrayList;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>預金者</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Customer {</span></p>

<p class=MsoNormal><span lang=EN-US>    private ArrayList&lt;Account&gt;
accountList; // </span><span style='font-family:メイリオ'>開設口座リスト</span></p>

<p class=MsoNormal><span lang=EN-US>    public Customer() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>        accountList = new
ArrayList&lt;Account&gt;();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void openOrdinaryAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        OrdinaryAccount oa = new
OrdinaryAccount();</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>普通預金口座を開設し、開設口座リストに追加する</span></p>

<p class=MsoNormal><span lang=EN-US>        accountList.add(oa);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void openFixedAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        FixedAccount fa = new
FixedAccount();</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>定期預金口座を開設し、開設口座リストに追加する</span></p>

<p class=MsoNormal><span lang=EN-US>        accountList.add(fa);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void closeAllAccounts() {</span></p>

<p class=MsoNormal><span lang=EN-US>        for (Account a : accountList) {</span></p>

<p class=MsoNormal><span lang=EN-US>             // </span><span
style='font-family:メイリオ'>開設済みの全ての預金口座</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>普通か定期</span><span lang=EN-US>)</span><span
style='font-family:メイリオ'>を解約する</span></p>

<p class=MsoNormal><span lang=EN-US>            a.close();</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.19.4 </span>動的束縛</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>プログラミング言語として多相性を実現するために必要な仕組み。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>動的束縛</span> <span
style='font-family:メイリオ'>←→</span> <span style='font-family:メイリオ'>静的束縛</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜例＞</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>新たに</span><span lang=EN-US>5</span><span
style='font-family:メイリオ'>年定期預金口座を追加した場合を考える。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>「解約する」方法は、定期預金口座と全く同じである。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>5</span><span style='font-family:メイリオ'>年定期預金クラスのオブジェクトに、メッセージ「解約する」を送った場合、どうなるか？</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>預金者クラスの開設口座リストには、普通預金口座クラス、定期預金口座クラスのオブジェクトに加えて、</span><span
lang=EN-US>5</span><span style='font-family:メイリオ'>年定期預金クラスのオブジェクトも登録される。</span>
<span style='font-family:メイリオ'>例１で示した、全預金口座を解約する方法は同じで良いか？</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=518 height=344 id="図 15"
src="OOT.files/image015.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt2_6;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.ArrayList;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import oop.chapt2_5.Account;</span></p>

<p class=MsoNormal><span lang=EN-US>import oop.chapt2_5.FixedAccount;</span></p>

<p class=MsoNormal><span lang=EN-US>import oop.chapt2_5.OrdinaryAccount;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>預金者</span></p>

<p class=MsoNormal><span lang=EN-US> * openFixed5YearsAccount() </span><span
style='font-family:メイリオ'>を追加した</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Customer {</span></p>

<p class=MsoNormal><span lang=EN-US>    private ArrayList&lt;Account&gt;
accountList; // </span><span style='font-family:メイリオ'>開設口座リスト</span></p>

<p class=MsoNormal><span lang=EN-US>    public Customer() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>        accountList = new
ArrayList&lt;Account&gt;();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    </span></p>

<p class=MsoNormal><span lang=EN-US>    public void openOrdinaryAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        OrdinaryAccount oa = new
OrdinaryAccount();</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>普通預金口座を開設し、開設口座リストに追加する</span></p>

<p class=MsoNormal><span lang=EN-US>        accountList.add(oa);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    </span></p>

<p class=MsoNormal><span lang=EN-US>    public void openFixedAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        FixedAccount fa = new
FixedAccount();</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>定期預金口座を開設し、開設口座リストに追加する</span></p>

<p class=MsoNormal><span lang=EN-US>        accountList.add(fa);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    </span></p>

<p class=MsoNormal><span lang=EN-US>    public void openFixed5YearsAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        FixedAccount f5a = new
Fixed5YearsAccount();</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>定期預金口座を開設し、開設口座リストに追加する</span></p>

<p class=MsoNormal><span lang=EN-US>        accountList.add(f5a);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    </span></p>

<p class=MsoNormal><span lang=EN-US>    public void closeAllAccounts() {</span></p>

<p class=MsoNormal><span lang=EN-US>        for (Account a : accountList) {</span></p>

<p class=MsoNormal><span lang=EN-US>            // </span><span
style='font-family:メイリオ'>開設済みの全ての預金口座</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>普通か定期</span><span lang=EN-US>)</span><span
style='font-family:メイリオ'>を解約する</span></p>

<p class=MsoNormal><span lang=EN-US>            a.close();</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt2_6;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import oop.chapt2_5.FixedAccount;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * 5</span><span style='font-family:メイリオ'>年定期預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Fixed5YearsAccount extends
FixedAccount {</span></p>

<p class=MsoNormal><span lang=EN-US>    public Fixed5YearsAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761500"></a><a name="_Toc171537188"><span lang=EN-US>2.20 </span>関連に関するその他の概念</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>幾つかの方法論で使われる概念を列挙します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>旧い表現もありますが、考え方を知っておくと良いと思います。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.20.1 </span>合成（<span lang=EN-US>has-a</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>has-a</span><span style='font-family:メイリオ'>と同様に方向を持つ関係です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>所有の関係を表わす。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>飛行機は、胴体と翼とエンジンと…の部品から組み立てられる</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトをより詳細に記述するため</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>再利用する部品を作るため</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.20.2 </span>格納（<span lang=EN-US>holds-a</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>has-a</span><span style='font-family:メイリオ'>と同様に方向を持つ関係である。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>格納するオブジェクトはコンテナリストとも呼ぶ。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>格納、埋め込み関係を表わす。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.20.3 </span>実装（<span lang=EN-US>is-implemented-using</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>顧客リストはノートを使って実装される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>顧客リストクラスは、ノートクラスをインスタンス変数に持つ。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>顧客リストクラスはノートクラスのサブクラスではない。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.20.4 </span>構成関連（パーティション関連）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>あるオブジェクトが、他のオブジェクトから構成される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>家族は、人間から構成される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト「家族」は、オブジェクト「人間」を結び付るために存在する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>2.20.5 </span>連想（<span lang=EN-US>Knows-about</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトＡがオブジェクトＢを知っているとき、ＡはＢの共通インターフェース（多態）のどのメソッドも呼び出すことができる。これ以外の関係（</span><span
lang=EN-US>has-a</span><span style='font-family:メイリオ'>や</span><span lang=EN-US>holds-a</span><span
style='font-family:メイリオ'>等）は存在しない。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>人と人（面識）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<span lang=EN-US style='font-size:10.0pt;font-family:"ＭＳ Ｐゴシック"'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:18.0pt;letter-spacing:1.0pt'>&nbsp;</span></p>

<h1><a name="_Toc173761501"></a><a name="_Toc171537189"><span lang=EN-US>3． </span>オブジェクト指向システム開発</a></h1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>この章の内容</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>オブジェクト指向開発の特徴</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>オブジェクト指向開発の流れ</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>開発プロセスと作成するモデル</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>モデル</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>分析プロセス</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>構築プロセス（設計モデルの作成）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>構築プロセス（実装モデルの作成）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>テストプロセス（テストモデルの作成）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>ユースケースモデル</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761502"></a><a name="_Toc171537190"><span lang=EN-US>3.1 </span>従来のシステム開発</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.1.1 </span>機能とデータを分ける方法論</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ＳＡＤＴ（</span><span lang=EN-US>Structured
Analysis and Design Technique</span><span style='font-family:メイリオ'>）構造化分析</span><span
lang=EN-US>/</span><span style='font-family:メイリオ'>設計技法</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ＲＤＤ（</span><span lang=EN-US>Requirement
Driven Design base on SREM</span><span style='font-family:メイリオ'>）ＳＲＥＭ要求駆動型設計</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ＳＡ</span><span lang=EN-US>/</span><span
style='font-family:メイリオ'>ＳＤ（</span><span lang=EN-US>Structured Analysis and
Structure Design</span><span style='font-family:メイリオ'>）構造化分析</span><span
lang=EN-US>/</span><span style='font-family:メイリオ'>構造化設計</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.1.2 </span>フォンノイマンハードウエアアーキテクチャに起源する</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ハードウエアは、メモリ、中央制御装置、演算ユニット、入力、出力で構成される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>プログラマはメモリ内にあるデータを操作するための制御文を用いる。</span>
</p>

<p class=MsoNormal><span style='font-family:メイリオ'>ハードウエア・アーキテクチャに合致したこのスタイルは高級言語においても引き継がれ、データとプログラムを分離する指向が続いてきた。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>機能中心法。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.1.3 </span>ウォータフォールモデル</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>理想的な新規開発だけを記述している。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>要件定義が確定すると、全ての要件を満たすデータベースが設計される。</span>
</p>

<p class=MsoNormal><span style='font-family:メイリオ'>各処理の設計者はそのデータベースを理解する必要がある。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>各処理はデータベースの構造を前提として設計・開発される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>仕様の追加や修正によってデータベースに変更が生じると、その影響範囲は各処理に及ぶことが多い。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761503"></a><a name="_Toc171537191"><span lang=EN-US>3.2 </span>オブジェクト指向開発の特徴</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.2.1 </span>オブジェクトによるモデリング</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>理解の容易性</span> <span
style='font-family:メイリオ'>（オブジェクトをもとにモデリングする。</span> <span style='font-family:
メイリオ'>オブジェクトは実世界をもとに抽出する。）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの普遍性</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>変更の局所性</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>カプセル化</span> <span
style='font-family:メイリオ'>（品質の単位になる。）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>再利用、バージョンアップ</span> <span
style='font-family:メイリオ'>（継承、サブタイピングを使用できる。）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.2.2 </span>ユースケースの利用</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースで要求モデルを作成する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースを分析・設計の出発点とする。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>従来は自然言語等で記述されていた要件定義書等に相当する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これをより統一化された記法で表わし、システムのライフサイクルを通して使用する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=420 height=188 id="図 16"
src="OOT.files/image016.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.2.3 </span>ＵＭＬ（<span lang=EN-US>Unified Modeling
Language</span>統一モデル記述言語）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>OMG</span><span style='font-family:メイリオ'>により</span><span
lang=EN-US>19997.12 UML1.1</span><span style='font-family:メイリオ'>として標準化された。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>以前は各手法毎に異なる記法が用いられ多少混乱する傾向にあった。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>開発プロセスはシステムの規模、問題ドメイン等で異なるので、いかなるプロセスにおいても使用可能であり、そのための拡張性を持った記法メタモデルとして策定されている。</span></p>

<p class=MsoNormal><span lang=EN-US>OMG </span><span style='font-family:メイリオ'>（</span><span
lang=EN-US>Object Management Group</span><span style='font-family:メイリオ'>）はオブジェクト技術の標準化団体。</span><span
lang=EN-US> CORBA(Common Object Request Broker Architecture)</span><span
style='font-family:メイリオ'>を策定している。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761504"></a><a name="_Toc171537192"><span lang=EN-US>3.3 </span>オブジェクト指向開発の流れ</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=196 valign=top style='width:147.15pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向分析</span></p>
  </td>
  <td width=208 valign=top style='width:155.95pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向構築</span></p>
  </td>
  <td width=208 valign=top style='width:155.9pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向テスト</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースを含むオブジェクトの追跡性がある。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.3.1 </span>オブジェクト指向分析</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの発見</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アプリケーションドメインにある名詞は有力な候補になる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>データ中心であったり、機能中心では、有効なオブジェクトを抽出できない。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>有効なオブジェクトは、理解容易であり、再利用しやすい。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>設計モデル、実装モデルで初めて現れるオブジェクトもある。（ファクトリーオブジェクトやプロキシオブジェクトなど）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの整理</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラス階層を作成する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>作成基準は、実際の世界での類似性をもとにする。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトどうしのやり取りの記述</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>あるオブジェクトが、システムで果たす役割を把握する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>他のオブジェクトとのやり取りを、シナリオ、ユースケースに表わす。（ＯＯＳＥ）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの属性と操作の定義</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>他のオブジェクトが送ることができるメッセージ、利用できる操作を定義する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの内部の定義</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>※</span> <span
style='font-family:メイリオ'>分析結果の理解容易性</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向分析では、人間が自然に現実を見る方法をもとにするために、機能とデータを分けた場合の分析結果よりも理解しやすい分析結果が得られる。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.3.2 </span>オブジェクト指向構築</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析モデルをもとに、ソースコードとして実装すること。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>実装環境に合わせて、分析モデルを変形しなければならない場合もある。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>可能な限り、分析モデルとの対応が取れるように設計モデル、言語に変換する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンポーネントを利用する。（以前に開発されたソースコードを利用する）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.3.3 </span>オブジェクト指向テスト</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>従来型の単体テストは、ルーチン、モジュールについて行う。オブジェクト指向システムではオブジェクト単位となり従来型よりも大きな単位となる。統合テストに移るときのハードルは低くなる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>テスト済みの親クラスの操作を、継承する子クラスのオブジェクトについても、新たにテストが必要である。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<span lang=EN-US style='font-size:10.0pt;font-family:"ＭＳ Ｐゴシック"'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:14.0pt'>&nbsp;</span></p>

<h2><a name="_Toc173761505"></a><a name="_Toc171537193"><span lang=EN-US>3.4 </span>開発プロセスと作成するモデル</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=589 height=303 id="図 17"
src="OOT.files/image017.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761506"></a><a name="_Toc171537194"><span lang=EN-US>3.5 </span>モデル</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>システム開発はモデルを開発する事である。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>各モデルは作成するシステムのある側面を捉えるためのものである。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>順次作成するモデルの中に複雑さを次第に導入することにより、システムの複雑さを管理する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>モデル間の変換は機械的ではなく、漸近的であり、才能ある開発者による創造的な作業である。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全てのモデルは追跡可能性を持つ。</span> <span
style='font-family:メイリオ'>すなわち、あるモデルに現れたオブジェクトは他のモデルに現れるオブジェクトとして追跡できる。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.5.1 </span>ＯＯＳＥ法</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>要求モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>設計モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>実装モデル</span> <span
style='font-family:メイリオ'>（ソースコード）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>テストモデル</span> <span
style='font-family:メイリオ'>（実装モデルのテスト結果）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.5.2 </span>ＯＭＴ法（参考）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトモデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>動的モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>機能モデル</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761507"></a><a name="_Toc171537195"><span lang=EN-US>3.6 </span>分析プロセス</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス：要求モデル（ユースケースモデル、インタフェース記述、ドメインモデル）、分析モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセスでは要求モデルと分析モデルを作成する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.6.1 </span>要求モデル （分析プロセスでは、要求モデルと分析モデルを作成する）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>要求仕様から要求モデルに変換する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>要求モデルでは、システムを使用するユーザがどのようにシステムを使うのかを記述する。</span>
</p>

<p class=MsoNormal><span style='font-family:メイリオ'>発注者、ユーザ主導で開発する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>システム範囲・境界を定義する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>要求モデルの構成要素</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケース・モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>インタフェース記述</span> <span
style='font-family:メイリオ'>（ユースケース・モデルを支援する上で有効な場合）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>問題ドメインモデル</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.6.2 </span>ユースケース・モデル</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス：要求モデル（ユースケースモデル、インタフェース記述、ドメインモデル）、分析モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクタとユースケースを使用する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクタとはシステムの外部に存在し、ユーザや外部のシステムが行う役割を表現する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=489 height=201 id="図 19"
src="OOT.files/image018.jpg"></span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクタはクラス、ユーザ自身や外部システム（カード決済システム）はアクタ・クラスのインスタンス。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースは、ユーザがシステムを利用するときに行う一連の処理を指す。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全てのユースケースの記述の集合はシステムの機能を完全に指定する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクタを取り出す。次にアクタが必要とするユースケースを取り出していく。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.6.3 </span>インタフェース記述</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス：要求モデル（ユースケースモデル、インタフェース記述、ドメインモデル）、分析モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースモデルを支援する上で有効な場合に作成する。</span></p>

<p class=MsoNormal><span lang=EN-US>GUI</span><span style='font-family:メイリオ'>プロトタイプを作成する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>他のシステムとのインタフェースを定義する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.6.4 </span>ドメインオブジェクトモデル</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス：要求モデル（ユースケースモデル、インタフェース記述、ドメインモデル）、分析モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>概念的観点のクラス図である。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>問題ドメインから直接抽出されたオブジェクトで構成される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユーザが使用する概念を直接表現したものである。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースモデルと協調して作成し、ユースケースを記述するための名詞の一覧になる。</span></p>

<p class=MsoNormal><span lang=EN-US>Coad/Yourdon</span><span style='font-family:
メイリオ'>法、</span><span lang=EN-US>Booch</span><span style='font-family:メイリオ'>法などでは最初のオブジェクトモデルが実装におけるクラスに直接マッピングされるが、</span><span
lang=EN-US>OOSE</span><span style='font-family:メイリオ'>ではドメインオブジェクトモデルを作成した後で、変更に強い分析モデルを作る。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ドメインオブジェクトは以降のプロセスでより洗練され詳細化される。</span><span
lang=EN-US>     </span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト名</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>論理的属性</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>静的インスタンス関連</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>継承</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>動的インスタンス関連</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>操作</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ドメインオブジェクトの多くは、分析モデルの実体オブジェクトとして現れる。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>3.6.5 </span>ユースケース主導設計</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースモデルは、全てのモデルのもとになる。</span></p>

<p class=MsoNormal><span lang=EN-US><img width=564 height=376 id="図 20"
src="OOT.files/image019.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>従来の仕様書と対比する</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>要件定義書</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>外部設計書</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>内部設計書</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ソースコード</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>テスト仕様書</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>利用者、発注者が理解できる範囲は？</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>上流工程からの記述の追跡性は？</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ライフサイクルを通して利用できるものは？</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.6.6 </span>分析モデル</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→要求モデル（ユースケースモデル、インタフェース記述、ドメインモデル）、分析モデル</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>発注者やユーザによって要求モデルが確認された後で、分析モデルの作成を開始する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>３種類のオブジェクトを使ってモデル化する。</span> <span
style='font-family:メイリオ'>→</span> <span style='font-family:メイリオ'>ステレオタイプ</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>実体オブジェクト</span> <span
style='font-family:メイリオ'>（ほとんどのドメインオブジェクトはここに分類される）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>インタフェースオブジェクト</span> <span
style='font-family:メイリオ'>（</span><span lang=EN-US>GUI</span><span
style='font-family:メイリオ'>等のインタフェースに依存する振舞いと情報をモデル化したもの）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>制御オブジェクト</span> <span
style='font-family:メイリオ'>（実体オブジェクトやインタフェースオブジェクトの振舞いとして自然にモデル化できないような振舞いがある。</span>
<span style='font-family:メイリオ'>そのような振舞いをモデル化したもの。</span> <span
style='font-family:メイリオ'>例：全口座残高の計算など。実装時にはクラスメソッドを使うようなもの。）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析モデルを作らずに次のプロセスにはいる手法もある。</span>
</p>

<p class=MsoNormal><span lang=EN-US>UML</span><span style='font-family:メイリオ'>ではステレオタイプの概念が取入れられている。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（</span><span lang=EN-US>OOSE</span><span
style='font-family:メイリオ'>）「最も安定したシステムは、現実世界のものを反映したものだけを使って構成されるものではない」。３種類のオブジェクトに現れるような人工的なドメインオブジェクトを考慮する事で、変更を局所化できるような強いモデルが得られる。インタフェースの変更はインタフェースオブジェクトに局所化される。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.6.7 </span>ステレオタイプ（<span lang=EN-US>stereotype </span>単純化された定型概念）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの高次の分類</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Rebecca Wirfs-Brock(1990)</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コントローラ</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コーディネータ</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Jacobson(1994)</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>インタフェース</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コントロール</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>エンティティ</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>参考資料１</span> <span
style='font-family:メイリオ'>ＳＡＳＤとオブジェクト指向による設計例の比較</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>変更・追加時の局所性</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>３種類のオブジェクトを使う場合の効果</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースモデルから分析モデル</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=468 height=312 id="図 18"
src="OOT.files/image020.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>システム環境に直接依存するユースケースの機能はインタフェースオブジェクトに割り当てる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>どのインタフェースオブジェクトに置く事も不自然であるデータ領域の取り扱いや情報の処理を行う機能は実体オブジェクトに割り当てる。（一般にドメインオブジェクトから導かれる）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>１つあるいは２、３のユースケースに限定され、いかなる他のオブジェクトに置くことも不自然な機能は制御オブジェクトに割り当てる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>基本的な責務割り当ての原則は、変更の局所性を達成できることである。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.6.8 </span>アナリシスパターン</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Martin Fowler: Analysis Patterns: Reusable
Object Models.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761508"></a><a name="_Toc171537196"><span lang=EN-US>3.7 </span>構築プロセス（設計モデルの作成）</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析モデルを実装環境に適合させる。（分析モデルは理想的な実装環境を前提とする）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析モデルの構造が設計モデルの骨格であることが理想であるが、関係データベース、分散環境、レスポンス、実装言語、並行プロセス等を導入する場合、分析モデルを変更する必要がある。</span>
<span style='font-family:メイリオ'>このため設計モデルとして新しいモデルを開発する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>設計モデルの作成を含む構築プロセスでは、一般に複雑さが増加する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>複雑さを管理するために、サブシステム、ＵＭＬのパッケージと依存関係を導入する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h4><span lang=EN-US>（1） </span>デザインパターン</h4>

<p class=MsoNormal><span lang=EN-US>Erich</span><span style='font-family:メイリオ'>Ｇａｍｍａ他</span><span
lang=EN-US> Design Patterns: Elements of Reusable Object-Oriented Software</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761509"></a><a name="_Toc171537197"><span lang=EN-US>3.8 </span>構築プロセス（実装モデルの作成）</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.8.1 </span>ソースコード。</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向言語は必須ではないが、オブジェクト指向の基本的概念が簡単に言語構文に変換できるという理由でオブジェクト指向言語が望ましい。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例えば関係データベースを使用する場合、型変換、検索などが含まれ複雑になる。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761510"></a><a name="_Toc171537198"><span lang=EN-US>3.9 </span>テストプロセス（テストモデルの作成）</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>テスト結果を記述したもでのである。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトモジュール、ユースケース、システム全体の順にテストを行う。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761511"></a><a name="_Toc171537199"><span lang=EN-US>3.10 </span>ユースケースモデル</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析プロセス→構築プロセス（設計サブプロセス）→構築プロセス（実装サブプロセス）→テストプロセス</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>3.10.1 </span>アクタ</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>システムの外部に存在し、システムと情報交換する全てのもの。（人や機械、他のシステム）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>主アクタと副アクタがある。</span> <span
style='font-family:メイリオ'>例）</span> <span style='font-family:メイリオ'>現金自動支払い機システムでの顧客（主アクタ）と修理係（副アクタ）。</span>
<span style='font-family:メイリオ'>副アクタは、主アクタがシステムを使用できるようにするためにシステムを扱う。</span> <span
style='font-family:メイリオ'>ユースケースの識別は主アクタから始める。</span> </p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクタクラスのインスタンスがユーザである。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクタはユーザが行う役割を表わす。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=517 height=202 id="図 21"
src="OOT.files/image021.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>                              </span></p>

<h3><span lang=EN-US>3.10.2 </span>ユースケース</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>各ユースケースは、最初にアクタによって起動される事象で構成される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクタとシステムとの間のインタラクションを定める。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースの全体集合によって、全てのシステム機能を規定できる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースはシステムのある限定された部分の機能に焦点を当てている。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースの数が増える毎に漸近的にシステム全体を分析できる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>異なった機能領域に対するユースケースを独立に開発し、その後で統合する。</span>
<span style='font-family:メイリオ'>これは、並列的な開発を行う場合にも有効である。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=503 height=191 id="図 22"
src="OOT.files/image022.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.10.3 </span>基本系列と代替系列</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>そのユースケースを理解するのに最も適した事象の列を基本系列とする。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>基本系列の変形やエラー系列は代替系列として記述する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.10.4 </span>ユースケースは振舞いと状態を持つオブジェクト</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（注）　預金システムをオブジェクトとみなし、ユースケースをシステムで実行される操作という見方を</span><span
lang=EN-US>OOSE</span><span style='font-family:メイリオ'>ではしない。最終的なシステム自身をオブジェクトとする見方はしない。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>実際にはかなりの数のユースケースを書くことになる。書き出すことで、もとの要求仕様書の不明瞭な点が分かる。記述の視点や範囲が決められているので書きやすく、読みやすい。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースを分割するよりも、長く広範囲な方が有効である場合が多い。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.10.5 </span>ユースケースの拡張関連</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>初めに単純で標準的なユースケースを作成する。（基本系列）</span>
<span style='font-family:メイリオ'>その後、そのユースケースにバリエーションが必要になった場合、元のユースケースに直接バリエーションを追加できるが、場合によっては基本系列が見えにくくなったりする。</span>
<span style='font-family:メイリオ'>そこで、バリエーションを別のユースケースとして作成し拡張関係によりユースケースを完成させることができる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（選択的な振る舞い）バリエーションや例外処理などのサブフローのこと。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>それぞれ独立したユースケースとして記述する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>基底となるユースケースの記述の中に、基底ユースケースのどこに拡張ユースケースを組込むかを記述する。（拡張点の記述）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>サブフローは全て別にしなくても構わない。複雑度との兼ね合いになる。</span></p>

<p class=MsoNormal><span lang=EN-US><img width=630 height=213 id="図 23"
src="OOT.files/image023.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）　基底ユースケース：　定期預金口座を解約する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　　　　拡張点：　その定期預金口座が担保設定されている場合</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　　　　拡張ユースケース：　担保解除処理を行う。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.10.6 </span>ユースケースの使用関連</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケース</span><span
lang=EN-US> B</span><span style='font-family:メイリオ'>はユースケース</span><span
lang=EN-US> A1</span><span style='font-family:メイリオ'>とユースケース</span><span
lang=EN-US>A2</span><span style='font-family:メイリオ'>によって使用される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケース</span><span
lang=EN-US> A1, A2</span><span style='font-family:メイリオ'>には共通の振舞いがあり、両方のユースケースへの繰返し記述を避けるために利用する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=458 height=224 id="図 24"
src="OOT.files/image024.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）　ユースケース</span><span
lang=EN-US>B</span><span style='font-family:メイリオ'>：　顧客を認証する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　　　　ユースケース</span><span
lang=EN-US>A1</span><span style='font-family:メイリオ'>：　普通預金口座を解約する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>　　　　ユースケース</span><span
lang=EN-US>A2</span><span style='font-family:メイリオ'>：　普通預金口座から引出す。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>使用関連も拡張関連も継承の一種と見ることができる。</span>
<span style='font-family:メイリオ'>ただし、オブジェクト指向プログラミング言語での継承と同じではない。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>3.10.7 </span>抽象ユースケース、具象ユースケース</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>抽象ユースケースは、実際にはインスタンスを持たない。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>拡張ユースケースのほとんどは抽象ユースケースである。（基底ユースケースに組みこまれて具象ユースケースになる）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>具象ユースケースは、実際にインスタンスを持つ。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>抽象ユースケースの記述は具象ユースケースの中で利用される。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースのインスタンスが具象ユースケースの記述に従って動作し、ある時点から具象ユースケースに変わって抽象ユースケースの記述に従って動作が継続し、再び具象ユースケースに戻る。</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h1><a name="_Toc173761512"></a><a name="_Toc171537200"><span lang=EN-US>4． </span>統一モデリング言語
ＵＭＬ</a></h1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>この章の内容</span><span
lang=EN-US> (UML1.3)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>ユースケース</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>クラス図</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>相互作用図</span> <span
style='font-family:メイリオ'>（シーケンス図）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>相互作用図</span> <span
style='font-family:メイリオ'>（コラボレーション図）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>パッケージ図</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>ステートチャート図（状態図）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>アクティビティ図</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>ステレオタイプ</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>OCL </span><span style='font-family:メイリオ'>（</span><span
lang=EN-US>Object Constraint Language</span><span style='font-family:メイリオ'>）</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761513"></a><a name="_Toc171537201"><span lang=EN-US>4.1 </span>ＵＭＬの概要</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>UML</span><span style='font-family:メイリオ'>（</span><span
lang=EN-US>Unified Modeling Language</span><span style='font-family:メイリオ'>）は方法論ではなく、モデリング言語である。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>モデリングを行うための言語を統一したものが</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>である。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>モデリングとは「観察の対象となる領域（対象領域）を人工的に投影する作業」を指す。</span></p>

<p class=MsoNormal><span lang=EN-US>1997</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US>11</span><span style='font-family:メイリオ'>月</span><span lang=EN-US>OMG</span><span
style='font-family:メイリオ'>（</span><span lang=EN-US>Object Management Group</span><span
style='font-family:メイリオ'>）標準となる。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>UML1.3</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1999</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US>6</span><span style='font-family:メイリオ'>月発行</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.1.1 </span>ユースケース図（<span lang=EN-US>use case diagram</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケース図</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.1.2 </span>相互作用図（<span lang=EN-US>interaction diagram</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>シーケンス図</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コラボレーション図（協調図）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.1.3 </span>静的構造図（<span lang=EN-US>static structure
diagram</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラス図</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト図</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.1.4 </span>振舞い図（<span lang=EN-US>behavior diagram</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ステートチャート図</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクティビティ図</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.1.5 </span>実装図（<span lang=EN-US>implementation diagram</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンポーネント図</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>配置図</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761514"></a><a name="_Toc171537202"><span lang=EN-US>4.2 </span>ユースケース</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>関連</span><span lang=EN-US>  </span><span
style='font-family:メイリオ'>アクタとユースケースの関係</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>拡張</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>インクルード</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>汎化</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>拡張</span></p>

<p class=MsoNormal><span lang=EN-US><img width=518 height=239 id="図 26"
src="OOT.files/image025.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>基底ユースケースは、拡張ユースケースがなくても完結する。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>インクルード</span></p>

<p class=MsoNormal><span lang=EN-US><img width=589 height=315 id="図 27"
src="OOT.files/image026.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>include</span><span style='font-family:
メイリオ'>する側のユースケースは単独では完結しない。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>汎化</span></p>

<p class=MsoNormal><span lang=EN-US><img width=479 height=312 id="図 28"
src="OOT.files/image027.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メリット：理解しやすくなる。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.2.1 </span>ユースケースを使う</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ヒアリングの結果のまとめ</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>システム要件定義書</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>プロジェクト計画のベース</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>繰返し開発、イテレーションの単位</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースはシステムの外見を表わす。従って、システム内のクラスとの関係は（ここでは）考えない。</span></p>

<p class=MsoNormal><span lang=EN-US>[</span><span style='font-family:メイリオ'>参考文献　</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>モデリングのエッセンス　マーチン・ファウラー、ケンドール・シコット</span><span
lang=EN-US>]</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h2><a name="_Toc173761515"></a><a name="_Toc171537203"><span lang=EN-US>4.3 </span>クラス図</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.1 </span>クラス</h3>

<p class=MsoNormal><span lang=EN-US><img width=293 height=146 id="図 29"
src="OOT.files/image028.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.2 </span>汎化・特化</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=326 height=185 id="図 30"
src="OOT.files/image029.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>4.3.3 </span>関連、ロール、多重度</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=415 height=245 id="図 31"
src="OOT.files/image030.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.4 </span>集約、コンポジション</h3>

<p class=MsoNormal><span lang=EN-US><img width=256 height=336 id="図 25"
src="OOT.files/image031.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.5 </span>限定子</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=451 height=204 id="図 32"
src="OOT.files/image032.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>限定子によって関連の多重度を減らすことができる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>この例では、ファイル名が限定子。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>限定子ファイル名によって１対多の関連を、１対１に減少させる。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.6 </span>誘導可能性、依存関係</h3>

<p class=MsoNormal><span lang=EN-US><img width=357 height=127 id="図 33"
src="OOT.files/image033.jpg"></span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>実装モデルにおいて、誘導可能性（</span><span
lang=EN-US>navigability</span><span style='font-family:メイリオ'>）の有無は重要な意味を持つ。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>上の例では、顧客オブジェクトは普通預金口座オブジェクトの参照を持つことを示す。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.7 </span>補助的記法</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>｛制約の記述｝</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《ステレオタイプ名》</span></p>

<p class=MsoNormal><span lang=EN-US><img width=495 height=106 id="図 34"
src="OOT.files/image034.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.8 </span>インタフェース</h3>

<p class=MsoNormal><span lang=EN-US><img width=542 height=366 id="図 37"
src="OOT.files/image035.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.9 </span>パラメタライズド・クラス、テンプレート・クラス</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>パラメタライズドクラス</span></p>

<p class=MsoNormal><span lang=EN-US><img width=432 height=149 id="図 40"
src="OOT.files/image036.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.3.10 </span>関連クラス</h3>

<p class=MsoNormal><span lang=EN-US><img width=396 height=165 id="図 39"
src="OOT.files/image037.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>4.3.11 </span>クラス図を使う</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>すべての表記を使うことに注力しない。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>観点を意識する。（概念の観点、仕様の観点、実装の観点）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>あらゆるものに対してモデルを作成しない。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761516"></a><a name="_Toc171537204"><span lang=EN-US>4.4 </span>相互作用図</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.4.1 </span>シーケンス図</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=427 height=346 id="図 41"
src="OOT.files/image038.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.4.2 </span>コラボレーション図</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=451 height=146 id="図 42"
src="OOT.files/image039.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.4.3 </span>相互作用図を使う</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>１つのユースケースにおけるオブジェクト群の振舞いを示す。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト間のコラボレーションを示す場合に適する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>あるオブジェクトの振舞いを正確に定義する場合は適さない。（この場合には、ステートチャート図（状態図）、アクティビティ図を使う）</span></p>

<p class=MsoNormal><span lang=EN-US>[</span><span style='font-family:メイリオ'>参考文献　</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>モデリングのエッセンス　マーチン・ファウラー、ケンドール・シコット</span><span
lang=EN-US>]</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761517"></a><a name="_Toc171537205"><span lang=EN-US>4.5 </span>パッケージ図</a></h2>

<p class=MsoNormal><span lang=EN-US><img width=425 height=181 id="図 43"
src="OOT.files/image040.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.5.1 </span>パッケージ図を使う</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>大規模なプロジェクトでは不可欠。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h2><a name="_Toc173761518"></a><a name="_Toc171537206"><span lang=EN-US>4.6 </span>振舞い図</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.6.1 </span>ステートチャート図（状態図）</h3>

<p class=MsoNormal><span lang=EN-US><img width=488 height=345 id="図 44"
src="OOT.files/image041.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.6.2 </span>ステートチャート図を使う</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>複数のユースケースにわたる１つのオブジェクトの振舞いを記述する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（複数のユースケース、すなはち、そのドメインにおけるそのオブジェクトの振舞い）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ステートチャート図での記述に適したオブジェクトの例</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユーザインタフェース</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>制御（</span><span lang=EN-US>MVC</span><span
style='font-family:メイリオ'>の</span><span lang=EN-US>Control</span><span
style='font-family:メイリオ'>）</span></p>

<p class=MsoNormal><span lang=EN-US>[</span><span style='font-family:メイリオ'>参考文献　</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>モデリングのエッセンス　マーチン・ファウラー、ケンドール・シコット</span><span
lang=EN-US>]</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><span lang=EN-US>4.7 </span><span lang=EN-US> </span><a name="_Toc173761519"></a><a
name="_Toc171537207">アクティビティ図</a></h2>

<p class=MsoNormal><span lang=EN-US><img width=353 height=460 id="図 45"
src="OOT.files/image042.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.7.1 </span>アクティビティ図（例１）</h3>

<p class=MsoNormal><span lang=EN-US><img width=431 height=549 id="図 46"
src="OOT.files/image043.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>4.7.2 </span>アクティビティ図（レーンの使用例）</h3>

<p class=MsoNormal><span lang=EN-US><img width=417 height=551 id="図 47"
src="OOT.files/image044.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.7.3 </span>アクティビティ図を使う</h3>

<p class=MsoNormal><span lang=EN-US>[</span><span style='font-family:メイリオ'>参考文献　</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>モデリングのエッセンス　マーチン・ファウラー、ケンドール・シコット</span><span
lang=EN-US>]</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ユースケースを分析する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクションをオブジェクトに結びつける必要がない。（必要がある場合は適さない）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ワークフローを理解する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>複雑な逐次アルゴリズムを記述する。</span></p>

<p class=MsoNormal><span lang=EN-US>UML</span><span style='font-family:メイリオ'>に準拠したフローチャートと見なす。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>マルチスレッドのアプリケーションを扱う。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761520"></a><a name="_Toc171537208"><span lang=EN-US>4.8 </span>ステレオタイプ</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>UML</span><span style='font-family:メイリオ'>ではいくつかのステレオタイプを定義している。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.1 </span>抽象化（<span lang=EN-US>Abstraction</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>drive</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>realize</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>refine</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>trace</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.2 </span>関連（<span lang=EN-US>Association</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>implicit</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.3 </span>関連の終端（<span lang=EN-US>AssociationEnd</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>association</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>global</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>local</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>parameter</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>self</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.4 </span>振舞いの特徴（<span lang=EN-US>BehavioralFeature</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>create</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>destroy</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.5 </span>呼出しイベント（<span lang=EN-US>CallEvent</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>create</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>destroy</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.6 </span>クラス（<span lang=EN-US>Class</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>implementationClass</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>type</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.7 </span>クラシファイヤ（<span lang=EN-US>Classifier</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>metacless</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>powertype</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>process</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>thread</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>utility</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.8 </span>コメント（<span lang=EN-US>Comment</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>requirement</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>responsibility</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.9 </span>コンポーネント（<span lang=EN-US>Component</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>document</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>executable</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>file</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>library</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>table</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.10 </span>制約（<span lang=EN-US>Constraint</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>invariant</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>postcondition</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>precondition</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.11 </span>流れ（<span lang=EN-US>Flow</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>become</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>copy</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.12 </span>汎化（<span lang=EN-US>Genaralization</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>implementation</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.13 </span>オブジェクトフロー状態（<span lang=EN-US>ObjectFlowState</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>signalflow</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>パッケージ（</span><span
lang=EN-US>Package</span><span style='font-family:メイリオ'>）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>facade</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>framework</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>stub</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>toplevel</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>パーミッション（</span><span
lang=EN-US>Permission</span><span style='font-family:メイリオ'>）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>access</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>friend</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>import</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>4.8.14 </span>ユーセージ（<span lang=EN-US>Usage</span>）</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>call</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>create</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>instantiate</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>《</span><span lang=EN-US>send</span><span
style='font-family:メイリオ'>》</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761521"></a><a name="_Toc171537209"><span lang=EN-US>4.9 </span><span
lang=EN-US>OCL </span>（<span lang=EN-US>Object Constraint Language</span>）</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>不変条件の表現</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>事前条件</span><span lang=EN-US>/</span><span
style='font-family:メイリオ'>事後条件の表現</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>演算子の優先順位</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コメント</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761522"></a><a name="_Toc171537210"><span lang=EN-US>4.10 </span>モデリングツール</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><s><span lang=EN-US>Rational Rose for Java (</span></s><s><span
style='font-family:メイリオ'>日本ラショナルソフトウエア</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>Cittera (Konesa) (</span></s><s><span
style='font-family:メイリオ'>オージス総研</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>MagicDraw Pro (</span></s><s><span
style='font-family:メイリオ'>エッチ・アイ・シー</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>WithClass (</span></s><s><span
style='font-family:メイリオ'>グレープシティ</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>Pattern Weaver (</span></s><s><span
style='font-family:メイリオ'>テクノロジックアート</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>Together ControlCenter (</span></s><s><span
style='font-family:メイリオ'>トゥゲザーソフト・ジャパン</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>WebGain StructureBuilder EnterPrise
Edition (</span></s><s><span style='font-family:メイリオ'>ウェブゲイン・ジャパン</span><span
lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>BridgePoint (</span></s><s><span
style='font-family:メイリオ'>東陽テクニカ</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>Visio (</span></s><s><span
style='font-family:メイリオ'>マイクロソフト</span><span lang=EN-US>)</span></s></p>

<p class=MsoNormal><s><span lang=EN-US>ArgoUML(http://argouml.tigris.org/)</span></s></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h1 style='text-indent:0mm'><span lang=EN-US> </span></h1>

<span lang=EN-US style='font-size:10.0pt;font-family:"ＭＳ Ｐゴシック"'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:18.0pt;letter-spacing:1.0pt'>&nbsp;</span></p>

<h1><a name="_Toc173761523"></a><a name="_Toc171537211"><span lang=EN-US>5． </span>オブジェクト指向プログラミング言語<span
lang=EN-US>Java</span></a></h1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761524"></a><a name="_Toc171537212"><span lang=EN-US>5.1 </span>オブジェクト指向プログラミング言語</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>引用［</span><span lang=EN-US>Martin
Fowler 1997</span><span style='font-family:メイリオ'>］</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>「オブジェクト指向言語でプログラムを作成する方法を学ぶことは難しいことではありません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>問題になるのは、“オブジェクト指向言語がもたらす利点を生かす”</span>
<span style='font-family:メイリオ'>ということを学ぶには時間がかかるという点です。（大きなパラダイムシフトが必要）」</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761525"></a><a name="_Toc171537213"><span lang=EN-US>5.2 </span><span
lang=EN-US>Java</span></a>の歴史</h2>

<p class=MsoNormal><span style='font-family:メイリオ'>主な歴史（概略なので正確ではありません）</span></p>

<p class=MsoNormal><span lang=EN-US>1995</span><span style='font-family:メイリオ'>年</span>
<span style='font-family:メイリオ'>サン・マイクロシステムズが</span><span lang=EN-US>Java</span><span
style='font-family:メイリオ'>を発表。</span></p>

<p class=MsoNormal><span lang=EN-US>1996</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US> JDK1.0</span><span style='font-family:メイリオ'>版</span></p>

<p class=MsoNormal><span lang=EN-US>2004</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US> J2SE1.5.0</span></p>

<p class=MsoNormal><span lang=EN-US>2006</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US> OpenJDK</span></p>

<p class=MsoNormal><span lang=EN-US>2010</span><span style='font-family:メイリオ'>年</span>
<span style='font-family:メイリオ'>オラクルがサン・マイクロシステムズを買収</span></p>

<p class=MsoNormal><span lang=EN-US>2014</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US> Java SE8</span></p>

<p class=MsoNormal><span lang=EN-US>2017</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US> AdoptOpenJDK</span></p>

<p class=MsoNormal><span lang=EN-US>2020</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US> Adoptium</span></p>

<p class=MsoNormal><span lang=EN-US>2024</span><span style='font-family:メイリオ'>年</span><span
lang=EN-US> Java SE22</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761526"></a><a name="_Toc171537214"><span lang=EN-US>5.3 </span><span
lang=EN-US>Java</span>の特徴</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.1 </span>オブジェクト指向プログラミング言語</h3>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>オブジェクト指向設計モデルがスムーズに実装できます。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>カプセル化</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>継承</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>多態性（多相性、ポリモーフィズム）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>クラスベース</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Java</span><span style='font-family:メイリオ'>、</span><span
lang=EN-US>C#</span><span style='font-family:メイリオ'>、</span><span lang=EN-US>
Kotlin</span><span style='font-family:メイリオ'>、</span><span lang=EN-US> Ruby</span><span
style='font-family:メイリオ'>、</span><span lang=EN-US> Python</span><span
style='font-family:メイリオ'>、、、</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.2 </span>シンプル</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>C++</span><span style='font-family:メイリオ'>などの複雑さは言語仕様から除いてあります。（何でも出来る指向の</span><span
lang=EN-US>C++</span><span style='font-family:メイリオ'>は肥大化しているとも言えます）</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.3 </span>インタプリタ型</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>コンパイルするとバイトコード（中間コード）が生成され、バイトコードは</span><span
lang=EN-US>JVM</span><span style='font-family:メイリオ'>内のインタープリタで実行されます。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>プロトタイピングに向いています。</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.4 </span>クラスライブラリ</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>JDK</span><span style='font-family:メイリオ'>の一部として（標準として）、良く利用する機能を持ったクラスが用意されています。</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.5 </span>安定性</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>強い型付けの言語</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>コンパイル時と実行時の二重チェック</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>リファレンス（</span><span lang=EN-US>C++</span><span
style='font-family:メイリオ'>のポインタ演算はできません）</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.6 </span>セキュリティ</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>従来の言語では、アプリケーションの安全性は言語の仕様とは独立しています。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Java</span><span style='font-family:メイリオ'>ではセキュリティのパッケージが</span><span
lang=EN-US>JDK</span><span style='font-family:メイリオ'>に含まれています。</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.7 </span>プラットフォーム依存しない</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>再コンパイルせずに複数のプラットフォームで動きます。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Write Once Run Anywhere</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>主要な</span><span lang=EN-US>OS</span><span
style='font-family:メイリオ'>用の</span><span lang=EN-US>JVM</span><span
style='font-family:メイリオ'>（</span><span lang=EN-US>Java</span><span
style='font-family:メイリオ'>仮想マシン）が提供されています。</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.8 </span>マルチスレッド</h3>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>並列プログラミングによる並列処理が可能です。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>同期プリミティブが高機能、豊富</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.9 </span>ソフトウエア・プラットフォーム</h3>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Java</span><span style='font-family:メイリオ'>仮想マシン（</span><span
lang=EN-US>Java Virtual Machine</span><span style='font-family:メイリオ'>）によりマシンや</span><span
lang=EN-US>OS</span><span style='font-family:メイリオ'>に対して独立しています。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Windows</span><span style='font-family:メイリオ'>、</span><span
lang=EN-US>MacOS</span><span style='font-family:メイリオ'>、</span><span lang=EN-US>Linux</span><span
style='font-family:メイリオ'>用の</span><span lang=EN-US>JVM</span><span
style='font-family:メイリオ'>が提供されています。</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.10 </span>ガーベッジ・コレクタ （<span lang=EN-US>garbage
collector</span>）</h3>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>プログラムが使わなくなったメモリを自動的に開放します。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>Ｃ</span><span lang=EN-US>++</span><span
style='font-family:メイリオ'>で</span><span lang=EN-US> new</span><span
style='font-family:メイリオ'>したものを、</span><span lang=EN-US>delete</span><span
style='font-family:メイリオ'>や</span><span lang=EN-US> free </span><span
style='font-family:メイリオ'>し忘れるとメモリリークを引き起こす。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>JavaVM</span><span style='font-family:メイリオ'>のインタプリタが管理するメモリ領域以外はアクセスできない。（セキュリティ強化、障害予防）</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.11 </span>カプセル化（<span lang=EN-US>Encapsulation</span>）<span
lang=EN-US>:</span></h3>

<p class=MsoNormal><span style='font-family:メイリオ'>データとそれに関連するメソッドを</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>つの単位（クラス）にまとめ、外部からデータを直接アクセスできないようにします。これにより、データの保護と内部の実装の隠蔽が可能になります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクセス修飾子（</span><span
lang=EN-US>public, private, protected, </span><span style='font-family:メイリオ'>なし）を使って、データの可視性を制御します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.12 </span>継承（<span lang=EN-US>Inheritance</span>）<span
lang=EN-US>:</span></h3>

<p class=MsoNormal><span style='font-family:メイリオ'>既存のクラス（スーパークラス）を基に新しいクラス（サブクラス）を作成する機能です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>サブクラスはスーパークラスの特性を継承し、さらに独自の特性を追加することができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>再利用性とコードの簡潔さを高め、階層的な関係を表現します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.13 </span>ポリモーフィズム（<span lang=EN-US>Polymorphism</span>）<span
lang=EN-US>:</span></h3>

<p class=MsoNormal><span style='font-family:メイリオ'>同じ操作を異なるデータ型のオブジェクトに対して行うことができる機能です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これにより、同じメソッド名でも異なる実装を持つことができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オーバーライド（メソッドの再定義）やオーバーロード（同じメソッド名で異なる引数リストを持つ複数のメソッド）を利用します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.14 </span>抽象化（<span lang=EN-US>Abstraction</span>）<span
lang=EN-US>:</span></h3>

<p class=MsoNormal><span style='font-family:メイリオ'>必要な情報だけを取り出し、詳細を隠すことで、システムの複雑さを管理しやすくします。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>抽象クラスやインターフェースを使って、共通の特性や動作を定義し、具体的な実装をサブクラスや実装クラスに任せます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.3.15 </span><span lang=EN-US>OOPL</span>の特性を活かした実装</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>デザインパターンは優れた例です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761527"><span lang=EN-US>5.4 </span><span lang=EN-US>Java</span>を始める</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.4.1 </span>統合開発環境<span lang=EN-US>IDE</span>をインストールする</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>以前は次の手順でプログラミングを行いました。</span></p>

<h4><span lang=EN-US>（1） </span><span lang=EN-US>JDK</span>をダウンロードする</h4>

<h4><span lang=EN-US>（2） </span><span lang=EN-US>IDK</span>をインストールする</h4>

<h4><span lang=EN-US>（3） </span>環境変数を設定する</h4>

<h4 style='margin-left:0mm;text-indent:0mm'>ここまでは初回のみ。以下は開発サイクルの中で繰り返されます。</h4>

<h4><span lang=EN-US>（4） </span>テキストエディタで<span lang=EN-US>.java</span>ファイルを作成する</h4>

<h4><span lang=EN-US>（5） </span><span lang=EN-US>javac</span>コマンドでコンパイルして<span
lang=EN-US>.class</span>（バイトコード）ファイルを作成する</h4>

<h4><span lang=EN-US>（6） </span><span lang=EN-US>java</span>コマンドで<span
lang=EN-US>.class</span>ファイルを起動する</h4>

<p class=MsoNormal><b><span style='font-family:メイリオ'>※現在は特別な理由がない限り、</span><span
lang=EN-US>IDE</span></b><b><span style='font-family:メイリオ'>を使ってプログラミングします。</span></b></p>

<p class=MsoNormal><span lang=EN-US>Preiades all-in-one </span><span
style='font-family:メイリオ'>や</span> <span lang=EN-US>IntelliJ </span><span
style='font-family:メイリオ'>などを使用します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.4.2 </span>サンプルコードを動かす。</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>サンプルコードを真似てコードを書き、動かしてみます。</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class HelloWorld {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main (String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>       
System.out.println(&quot;HelloWorld&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761528"><span lang=EN-US>5.5 </span>基本型と参照型</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>基本型（プリミティブ型）と参照型（後述）とリテラル</span>
</p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Sample1 {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　論理値</span> <span style='font-family:メイリオ'>リテラル</span><span
lang=EN-US> true, false*/</span></p>

<p class=MsoNormal><span lang=EN-US>    boolean bl = true;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　</span><span lang=EN-US>16</span><span style='font-family:メイリオ'>ビット</span><span
lang=EN-US>Unicode</span><span style='font-family:メイリオ'>文字</span><span
lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    char c = '</span><span
style='font-family:メイリオ'>Ａ</span><span lang=EN-US>';</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　</span><span lang=EN-US>8</span><span style='font-family:メイリオ'>ビット符号付整数</span><span
lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    byte b = 10;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　</span><span lang=EN-US>16</span><span style='font-family:メイリオ'>ビット符号付整数</span><span
lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    short s = 20;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　</span><span lang=EN-US>32</span><span style='font-family:メイリオ'>ビット符号付整数</span><span
lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    int i = 30;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　</span><span lang=EN-US>64</span><span style='font-family:メイリオ'>ビット符号付整数</span><span
lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    long l = 40;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　</span><span lang=EN-US>32</span><span style='font-family:メイリオ'>ビット浮動小数点数</span><span
lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    float f = 10.0f;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>基本型　</span><span lang=EN-US>64</span><span style='font-family:メイリオ'>ビット浮動小数点数</span><span
lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    double d = 10.0;         // = 1.0e1, =
0.1E2 </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>参照型　リテラル</span><span lang=EN-US> null */</span></p>

<p class=MsoNormal><span lang=EN-US>    Sample1 sample1 = null; </span></p>

<p class=MsoNormal><span lang=EN-US>    double d2 =  3.1412; //</span><span
style='font-family:メイリオ'>数値リテラル</span></p>

<p class=MsoNormal><span lang=EN-US>    double d3 =  3.1412; //</span><span
style='font-family:メイリオ'>数値リテラル</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761529"><span lang=EN-US>5.6 </span>変数宣言</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>変数宣言</span>
</p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Sample2 {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>フィールド変数（インスタンス変数かクラス変数（後述））</span><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    int value = 0;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>フィールド変数（インスタンス変数かクラス変数（後述））</span><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    final String name = &quot;</span><span
style='font-family:メイリオ'>初期値</span><span lang=EN-US>&quot;;    //final</span><span
style='font-family:メイリオ'>変数</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /** </span><span style='font-family:
メイリオ'>フィールド変数（インスタンス変数かクラス変数）</span><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>    int[] ia = new int[5];    //</span><span
style='font-family:メイリオ'>配列変数</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /**</span></p>

<p class=MsoNormal><span lang=EN-US>     * </span><span style='font-family:
メイリオ'>メソッド</span></p>

<p class=MsoNormal><span lang=EN-US>     */</span></p>

<p class=MsoNormal><span lang=EN-US>    public void method(String param) {  //</span><span
style='font-family:メイリオ'>パラメータ</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        int i = 0;    //</span><span
style='font-family:メイリオ'>ローカル変数（プリミティブ型か参照型）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761530"><span lang=EN-US>5.7 </span>演算子</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>演算子</span>
</p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Sample3 {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    public void method() {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        int i = 0;</span></p>

<p class=MsoNormal><span lang=EN-US>        int j = ++i;  //</span><span
style='font-family:メイリオ'>インクリメント演算子</span></p>

<p class=MsoNormal><span lang=EN-US>        int k = --i;  //</span><span
style='font-family:メイリオ'>デクリメント演算子</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        if ( i &gt; j)  { }   //</span><span
style='font-family:メイリオ'>関係演算子（大なり）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ( i &gt;= j) { }   //</span><span
style='font-family:メイリオ'>関係演算子（以上）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ( i &lt; j)  { }   //</span><span
style='font-family:メイリオ'>関係演算子（小なり）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ( i &lt;= j) { }   //</span><span
style='font-family:メイリオ'>関係演算子（以下）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ( i == j) { }   //</span><span
style='font-family:メイリオ'>関係演算子（等しい）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ( i != j) { }   //</span><span
style='font-family:メイリオ'>関係演算子（等しくない）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        if (!(i &gt; j)) { }           //</span><span
style='font-family:メイリオ'>論理否定</span></p>

<p class=MsoNormal><span lang=EN-US>        if ((i &gt; j) &amp; (i &gt; k)) {
}  //</span><span style='font-family:メイリオ'>論理積（</span><span lang=EN-US>AND</span><span
style='font-family:メイリオ'>）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ((i &gt; j) | (i &gt; k)) { } 
//</span><span style='font-family:メイリオ'>論理和（</span><span lang=EN-US>OR</span><span
style='font-family:メイリオ'>）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ((i &gt; j) ^ (i &gt; k)) { } 
//</span><span style='font-family:メイリオ'>排他的論理和（</span><span lang=EN-US>XOR</span><span
style='font-family:メイリオ'>）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ((i &gt; j) &amp;&amp; (i &gt;
k)) { } //</span><span style='font-family:メイリオ'>条件積（左側が先に評価され必要な場合のみ次が評価される）</span></p>

<p class=MsoNormal><span lang=EN-US>        if ((i &gt; j) || (i &gt; k)) { }
//</span><span style='font-family:メイリオ'>条件和（左側が先に評価され必要な場合のみ次が評価される）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        int a = 0xF00F;</span></p>

<p class=MsoNormal><span lang=EN-US>        int b = 0x0FF0;</span></p>

<p class=MsoNormal><span lang=EN-US>        int c = 0xAAAA;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        int d = a &amp; b; //0x0000 </span><span
style='font-family:メイリオ'>二項ビット演算子（ビット積</span><span lang=EN-US> AND)</span></p>

<p class=MsoNormal><span lang=EN-US>        int e = a | b; //0xFFFF </span><span
style='font-family:メイリオ'>二項ビット演算子（ビット和</span><span lang=EN-US> OR)</span></p>

<p class=MsoNormal><span lang=EN-US>        int f = c ^ e; //0x5555 </span><span
style='font-family:メイリオ'>二項ビット演算子（排他的ビット和</span><span lang=EN-US> XOR)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        int x = a &lt;&lt; 2;   //2</span><span
style='font-family:メイリオ'>ビット左シフトで右側をゼロで埋める</span></p>

<p class=MsoNormal><span lang=EN-US>        int y = b &gt;&gt; 2;   //2</span><span
style='font-family:メイリオ'>ビット右シフトで左側を符号ビット（最上位）で埋める</span></p>

<p class=MsoNormal><span lang=EN-US>        int z = b &gt;&gt;&gt; 2;  //2</span><span
style='font-family:メイリオ'>ビット右シフトで左側をゼロで埋める</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //instanceof </span><span
style='font-family:メイリオ'>演算子</span></p>

<p class=MsoNormal><span lang=EN-US>        String s1 = &quot;ABC&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>        if (s1 instanceof String) {</span></p>

<p class=MsoNormal><span lang=EN-US>            System.out.println(&quot;s1 </span><span
style='font-family:メイリオ'>は</span><span lang=EN-US> String</span><span
style='font-family:メイリオ'>クラスのインスタンスです</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //</span><span style='font-family:
メイリオ'>条件演算子</span><span lang=EN-US> ?:</span></p>

<p class=MsoNormal><span lang=EN-US>        x = ((a &lt; b) ? a : b);</span></p>

<p class=MsoNormal><span lang=EN-US>        /*</span></p>

<p class=MsoNormal><span lang=EN-US>                if (a &lt; b) {</span></p>

<p class=MsoNormal><span lang=EN-US>                    x = a;</span></p>

<p class=MsoNormal><span lang=EN-US>                } else {</span></p>

<p class=MsoNormal><span lang=EN-US>                    x = b;</span></p>

<p class=MsoNormal><span lang=EN-US>                }</span></p>

<p class=MsoNormal><span lang=EN-US>        */</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //</span><span style='font-family:
メイリオ'>代入演算子</span></p>

<p class=MsoNormal><span lang=EN-US>        x = 1;</span></p>

<p class=MsoNormal><span lang=EN-US>        x = y = z = 1;</span></p>

<p class=MsoNormal><span lang=EN-US>        x += 1;         //x = x + 1;</span></p>

<p class=MsoNormal><span lang=EN-US>        x *= 2;         //x = x * 2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //</span><span style='font-family:
メイリオ'>文字列結合演算子</span></p>

<p class=MsoNormal><span lang=EN-US>        String s2 = &quot;DEF&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>        String s3 = s1 + s2;
//&quot;ABCDEF&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>        s3 += s2;            //s3 = s3 +
s2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //new </span><span
style='font-family:メイリオ'>演算子</span></p>

<p class=MsoNormal><span lang=EN-US>        String s4 = new
String(&quot;GHI&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761531"><span lang=EN-US>5.8 </span>制御フロー文</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.ArrayList;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>制御フロー文</span>
</p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Sample4 {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    public int method() {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        int a = 1;</span></p>

<p class=MsoNormal><span lang=EN-US>        int b = 2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //if</span><span style='font-family:
メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        if (a &lt; b) {  //</span><span
style='font-family:メイリオ'>条件式</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>真の場合</span></p>

<p class=MsoNormal><span lang=EN-US>        } else {</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>偽の場合</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //switch</span><span
style='font-family:メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        switch (a) {    //a </span><span
style='font-family:メイリオ'>は整数式</span></p>

<p class=MsoNormal><span lang=EN-US>            case 2:</span></p>

<p class=MsoNormal><span lang=EN-US>                //a </span><span
style='font-family:メイリオ'>がラベル</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>整数定数</span><span lang=EN-US> 2)</span><span
style='font-family:メイリオ'>と等しい場合の処理</span></p>

<p class=MsoNormal><span lang=EN-US>                break;    //</span><span
style='font-family:メイリオ'>ある場合は次のラベルの評価をしない。</span><span lang=EN-US>switch</span><span
style='font-family:メイリオ'>を終了する</span></p>

<p class=MsoNormal><span lang=EN-US>            case 3:</span></p>

<p class=MsoNormal><span lang=EN-US>                //a </span><span
style='font-family:メイリオ'>がラベル</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>整数定数</span><span lang=EN-US> 3)</span><span
style='font-family:メイリオ'>と等しい場合の処理</span></p>

<p class=MsoNormal><span lang=EN-US>            default:</span></p>

<p class=MsoNormal><span lang=EN-US>                //a </span><span
style='font-family:メイリオ'>がどのラベルとも違う場合の処理</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //while</span><span
style='font-family:メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        while (a &lt; b) {</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>繰り返す処理</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //do-while</span><span
style='font-family:メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        do {</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>繰り返す処理</span></p>

<p class=MsoNormal><span lang=EN-US>        } while (a &lt; b);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //for</span><span style='font-family:
メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        for (int i = 0; i &lt; a; i++) {</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>繰り返す処理</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>        </span></p>

<p class=MsoNormal><span lang=EN-US>        //</span><span style='font-family:
メイリオ'>拡張</span><span lang=EN-US>for</span><span style='font-family:メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        ArrayList&lt;String&gt; list1 = new
ArrayList&lt;&gt;();</span></p>

<p class=MsoNormal><span lang=EN-US>        for(String s : list1) {</span></p>

<p class=MsoNormal><span lang=EN-US>           System.out.println(s);</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>        </span></p>

<p class=MsoNormal><span lang=EN-US>        //Stream#forEach</span><span
style='font-family:メイリオ'>メソッド</span></p>

<p class=MsoNormal><span lang=EN-US>        list1.stream().forEach(s -&gt;
System.out.println(s));</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //break</span><span
style='font-family:メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        for (int i = 0; i &lt; a; i++) {</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>繰り返す処理</span></p>

<p class=MsoNormal><span lang=EN-US>            if (i == b) {</span></p>

<p class=MsoNormal><span lang=EN-US>                break;   //</span><span
style='font-family:メイリオ'>ループを終了する</span></p>

<p class=MsoNormal><span lang=EN-US>            }</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>繰り返す処理</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //continue</span><span
style='font-family:メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        for (int i = 0; i &lt; a; i++) {</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>繰り返す処理</span></p>

<p class=MsoNormal><span lang=EN-US>            if (i == b) {</span></p>

<p class=MsoNormal><span lang=EN-US>                continue;  //</span><span
style='font-family:メイリオ'>ループ本体の終りに制御を移し次にループ式を評価する</span></p>

<p class=MsoNormal><span lang=EN-US>            }</span></p>

<p class=MsoNormal><span lang=EN-US>            //</span><span
style='font-family:メイリオ'>繰り返す処理</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        //return</span><span
style='font-family:メイリオ'>文</span></p>

<p class=MsoNormal><span lang=EN-US>        return a;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761532"><span lang=EN-US>5.9 </span>列挙型<span lang=EN-US>
enum</span></a></h2>

<p class=MsoNormal><span lang=EN-US>**</span><span style='font-family:メイリオ'>列挙型（</span><span
lang=EN-US>enum</span><span style='font-family:メイリオ'>）</span><span lang=EN-US>**</span><span
style='font-family:メイリオ'>は、</span><span lang=EN-US>Java </span><span
style='font-family:メイリオ'>で特定の値の集合を定義するために使用されます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例えば、曜日、季節、カードのスートなど、限られた数の値を表現したいときに使います。列挙型は、定数のグループを簡単に作成でき、コードの可読性と保守性を向上させます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>public enum Day {</span></p>

<p class=MsoNormal><span lang=EN-US>    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,
THURSDAY, FRIDAY, SATURDAY</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class EnumExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        Day today = Day.SATURDAY;</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;Today is:
&quot; + today);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761533"><span lang=EN-US>5.10 </span>匿名クラス</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>匿名クラスは、一度きりしか使わないクラスを定義するための方法です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>通常、匿名クラスはインターフェースや抽象クラスのインスタンスを作成するために使われます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラスの名前をつけずに、その場でクラスを定義してインスタンス化できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>public class AnonymousClassExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        // Runnable</span><span
style='font-family:メイリオ'>インターフェースを匿名クラスで実装</span></p>

<p class=MsoNormal><span lang=EN-US>        Runnable runnable = new Runnable()
{</span></p>

<p class=MsoNormal><span lang=EN-US>            @Override</span></p>

<p class=MsoNormal><span lang=EN-US>            public void run() {</span></p>

<p class=MsoNormal><span lang=EN-US>               
System.out.println(&quot;Anonymous class running&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>            }</span></p>

<p class=MsoNormal><span lang=EN-US>        };</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>新しいスレッドを開始</span></p>

<p class=MsoNormal><span lang=EN-US>        new Thread(runnable).start();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>この例では、</span><span
lang=EN-US>Runnable </span><span style='font-family:メイリオ'>インターフェースを匿名クラスで実装し、スレッドを開始しています。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>匿名クラスを使うことで、簡潔にインターフェースを実装することができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761534"><span lang=EN-US>5.11 </span><span lang=EN-US>this </span>と<span
lang=EN-US> super</span></a></h2>

<p class=MsoNormal><span lang=EN-US>this </span><span style='font-family:メイリオ'>と</span><span
lang=EN-US> super </span><span style='font-family:メイリオ'>は、</span><span
lang=EN-US>Java </span><span style='font-family:メイリオ'>のキーワードで、それぞれ現在のオブジェクトや親クラス（スーパークラス）への参照を表します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.11.1 </span><span lang=EN-US>this</span></h3>

<p class=MsoNormal><span lang=EN-US>this </span><span style='font-family:メイリオ'>は、現在のオブジェクトを指すキーワードです。クラスのインスタンスメソッドやコンストラクタの中で使われます。特に、インスタンス変数とローカル変数の名前が同じ場合に、インスタンス変数を明示的に参照するために使います。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class ThisExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    private int number;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    public ThisExample(int number) {</span></p>

<p class=MsoNormal><span lang=EN-US>        this.number = number; // </span><span
style='font-family:メイリオ'>インスタンス変数を指す</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    public void printNumber() {</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(this.number); //
</span><span style='font-family:メイリオ'>インスタンス変数を指す</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ThisExample example = new
ThisExample(10);</span></p>

<p class=MsoNormal><span lang=EN-US>        example.printNumber(); // </span><span
style='font-family:メイリオ'>出力</span><span lang=EN-US>: 10</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.11.2 </span><span lang=EN-US>super</span></h3>

<p class=MsoNormal><span lang=EN-US>super </span><span style='font-family:メイリオ'>は、親クラス（スーパークラス）のメンバー（フィールドやメソッド）にアクセスするために使います。親クラスのコンストラクタを呼び出すときにも使用されます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class Animal {</span></p>

<p class=MsoNormal><span lang=EN-US>    public void makeSound() {</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;Animal
sound&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class Dog extends Animal {</span></p>

<p class=MsoNormal><span lang=EN-US>    @Override</span></p>

<p class=MsoNormal><span lang=EN-US>    public void makeSound() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super.makeSound(); // </span><span
style='font-family:メイリオ'>親クラスのメソッドを呼び出す</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;Dog
barks&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class SuperExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        Dog dog = new Dog();</span></p>

<p class=MsoNormal><span lang=EN-US>        dog.makeSound(); // </span><span
style='font-family:メイリオ'>出力</span><span lang=EN-US>: Animal sound</span></p>

<p class=MsoNormal><span lang=EN-US>                         //      Dog barks</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761535"><span lang=EN-US>5.12 </span>ボクシングとアンボクシング</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>ボクシングとアンボクシングは、プリミティブ型と対応するラッパークラス（オブジェクト型）の間で変換するプロセスです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.12.1 </span>ボクシング</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>プリミティブ型（</span><span
lang=EN-US>int</span><span style='font-family:メイリオ'>、</span><span lang=EN-US>char</span><span
style='font-family:メイリオ'>、</span><span lang=EN-US>boolean</span><span
style='font-family:メイリオ'>など）を対応するラッパークラス（</span><span lang=EN-US>Integer</span><span
style='font-family:メイリオ'>、</span><span lang=EN-US>Character</span><span
style='font-family:メイリオ'>、</span><span lang=EN-US>Boolean</span><span
style='font-family:メイリオ'>など）のオブジェクトに変換することをボクシングといいます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>int num = 10;</span></p>

<p class=MsoNormal><span lang=EN-US>Integer boxedNum = num; // </span><span
style='font-family:メイリオ'>ボクシング</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.12.2 </span>アンボクシング</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>ラッパークラスのオブジェクトをプリミティブ型に変換することをアンボクシングといいます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Integer boxedNum = 10;</span></p>

<p class=MsoNormal><span lang=EN-US>int num = boxedNum; // </span><span
style='font-family:メイリオ'>アンボクシング</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761536"><span lang=EN-US>5.13 </span><span lang=EN-US>javadoc</span></a></h2>

<p class=MsoNormal><span lang=EN-US>javadoc </span><span style='font-family:
メイリオ'>は、</span><span lang=EN-US>Java </span><span style='font-family:メイリオ'>ソースコードに埋め込まれたコメントを使って、</span><span
lang=EN-US>HTML </span><span style='font-family:メイリオ'>形式の</span><span
lang=EN-US> API </span><span style='font-family:メイリオ'>ドキュメントを自動生成するツールです。開発者は、クラス、メソッド、フィールドなどの詳細をコメントとして記述し、</span><span
lang=EN-US>javadoc </span><span style='font-family:メイリオ'>を使って読みやすいドキュメントを生成します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>このクラスは例のためのクラスです。</span></p>

<p class=MsoNormal><span lang=EN-US> * @author ChatGPT</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class JavadocExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    </span></p>

<p class=MsoNormal><span lang=EN-US>    /**</span></p>

<p class=MsoNormal><span lang=EN-US>     * </span><span style='font-family:
メイリオ'>これはメインメソッドです。</span></p>

<p class=MsoNormal><span lang=EN-US>     * @param args </span><span
style='font-family:メイリオ'>コマンドライン引数</span></p>

<p class=MsoNormal><span lang=EN-US>     */</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;Hello,
javadoc!&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>    /**</span></p>

<p class=MsoNormal><span lang=EN-US>     * </span><span style='font-family:
メイリオ'>数値を加算するメソッドです。</span></p>

<p class=MsoNormal><span lang=EN-US>     * @param a </span><span
style='font-family:メイリオ'>一つ目の数値</span></p>

<p class=MsoNormal><span lang=EN-US>     * @param b </span><span
style='font-family:メイリオ'>二つ目の数値</span></p>

<p class=MsoNormal><span lang=EN-US>     * @return </span><span
style='font-family:メイリオ'>加算結果</span></p>

<p class=MsoNormal><span lang=EN-US>     */</span></p>

<p class=MsoNormal><span lang=EN-US>    public int add(int a, int b) {</span></p>

<p class=MsoNormal><span lang=EN-US>        return a + b;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これらのコメントを使って、</span><span
lang=EN-US>javadoc </span><span style='font-family:メイリオ'>ツールはクラスやメソッドの詳細なドキュメントを生成します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761537"><span lang=EN-US>5.14 </span>ジェネリクス（総称型）</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>ジェネリクス（総称型）は、クラスやメソッドが扱うデータの型をパラメータ化する仕組みです。ジェネリクスを使うことで、型安全性を高め、再利用性の高いコードを書くことができます。例えば、リストやマップのようなコレクションに対して、特定の型の要素だけを格納できるようにするために使用されます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.ArrayList;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.List;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class GenericsExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        List&lt;String&gt; stringList = new
ArrayList&lt;&gt;(); // String</span><span style='font-family:メイリオ'>型のリスト</span></p>

<p class=MsoNormal><span lang=EN-US>        stringList.add(&quot;Hello&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>       
stringList.add(&quot;Generics&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        for (String s : stringList) {</span></p>

<p class=MsoNormal><span lang=EN-US>            System.out.println(s);</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761538"><span lang=EN-US>5.15 </span>コレクション</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>コレクションは、データのグループを管理するためのクラスのセットです。代表的なコレクションには、リスト、セット、マップなどがあります。コレクションを使うことで、データの追加、削除、検索などの操作を簡単に行うことができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.ArrayList;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.HashSet;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.HashMap;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.List;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.Set;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.Map;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class CollectionExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>リスト</span></p>

<p class=MsoNormal><span lang=EN-US>        List&lt;String&gt; list = new
ArrayList&lt;&gt;();</span></p>

<p class=MsoNormal><span lang=EN-US>        list.add(&quot;Apple&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        list.add(&quot;Banana&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;List:
&quot; + list);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>セット</span></p>

<p class=MsoNormal><span lang=EN-US>        Set&lt;String&gt; set = new
HashSet&lt;&gt;();</span></p>

<p class=MsoNormal><span lang=EN-US>        set.add(&quot;Apple&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        set.add(&quot;Banana&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        set.add(&quot;Apple&quot;); // </span><span
style='font-family:メイリオ'>重複は無視される</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;Set:
&quot; + set);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>マップ</span></p>

<p class=MsoNormal><span lang=EN-US>        Map&lt;Integer, String&gt; map =
new HashMap&lt;&gt;();</span></p>

<p class=MsoNormal><span lang=EN-US>        map.put(1, &quot;One&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        map.put(2, &quot;Two&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;Map:
&quot; + map);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761539"><span lang=EN-US>5.16 </span>ストリーム</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>ストリームは、</span><span
lang=EN-US>Java 8 </span><span style='font-family:メイリオ'>で導入されたコレクションの操作を効率的に行うための</span><span
lang=EN-US>API</span><span style='font-family:メイリオ'>です。ストリームを使うことで、データのフィルタリング、マッピング、集計などの操作を簡潔なコードで記述できます。ストリームは一度だけ使えるデータの流れで、元のコレクションを変更しません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.Arrays;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.List;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.stream.Collectors;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class StreamExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        List&lt;String&gt; list =
Arrays.asList(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Cherry&quot;,
&quot;Date&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>フィルタリングと変換</span></p>

<p class=MsoNormal><span lang=EN-US>        List&lt;String&gt; result =
list.stream()</span></p>

<p class=MsoNormal><span lang=EN-US>                                  .filter(s
-&gt; s.startsWith(&quot;A&quot;))</span></p>

<p class=MsoNormal><span lang=EN-US>                                 
.map(String::toUpperCase)</span></p>

<p class=MsoNormal><span lang=EN-US>                                 
.collect(Collectors.toList());</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(result); // </span><span
style='font-family:メイリオ'>出力</span><span lang=EN-US>: [APPLE]</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761540"><span lang=EN-US>5.17 </span>ラムダ式</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>ラムダ式は、</span><span
lang=EN-US>Java 8 </span><span style='font-family:メイリオ'>で導入された匿名関数の一種で、簡潔に関数を記述する方法です。特に、コレクションの操作やストリームの処理でよく使われます。ラムダ式を使うことで、コードの可読性が向上し、冗長なコードを避けることができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.Arrays;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.List;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class LambdaExample {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        List&lt;Integer&gt; numbers =
Arrays.asList(1, 2, 3, 4, 5);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>        // </span><span style='font-family:
メイリオ'>ラムダ式を使ってリストの要素を</span><span lang=EN-US>2</span><span style='font-family:
メイリオ'>倍にして出力</span></p>

<p class=MsoNormal><span lang=EN-US>        numbers.forEach(n -&gt;
System.out.println(n * 2));</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これらの概念を理解することで、</span><span
lang=EN-US>Java 8 </span><span style='font-family:メイリオ'>の機能を活用して、より効率的で読みやすいコードを書くことができるようになります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761541"><span lang=EN-US>5.18 </span>オブジェクト</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析・設計によって抽出されたオブジェクト。（人、顧客、口座）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向で設計・実装されたシステムは、オブジェクト同士が相互作用（メッセージを送る、メソッドを呼び出す）ことでシステム要件を実現します。</span></p>

<h3><span lang=EN-US>5.18.1 </span>クラスとオブジェクト（インスタンス）の関係</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>銀行口座クラス</span></p>

<p class=MsoNormal><span lang=EN-US>A</span><span style='font-family:メイリオ'>さんの銀行口座オブジェクト</span></p>

<p class=MsoNormal><span lang=EN-US>B</span><span style='font-family:メイリオ'>さんの銀行口座オブジェクト</span></p>

<p class=MsoNormal><span lang=EN-US>A</span><span style='font-family:メイリオ'>さんの銀行口座インスタンス：実装寄りの文脈で使用されます</span></p>

<p class=MsoNormal><span lang=EN-US>B</span><span style='font-family:メイリオ'>さんの銀行口座インスタンス</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.18.2 </span>オブジェクトの同一性と同値性</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>Person</span><span style='font-family:メイリオ'>クラスとそのインスタンスが３つあります。（次図</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>参照）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=299 height=211 id="図 35"
src="OOT.files/image045.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>同じ名前</span><span lang=EN-US>
AND </span><span style='font-family:メイリオ'>同じ生年月日でも、インスタンスが別であれば、同一ではありません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>同じ名前</span><span lang=EN-US>
AND </span><span style='font-family:メイリオ'>同じ生年月日なので、２つのインスタンスは同値です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>以下のコードで確認できます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.LocalDate;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.Objects;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class Person {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String name;</span></p>

<p class=MsoNormal><span lang=EN-US>     private LocalDate birthDay;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public Person(String name, LocalDate
birthDay) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.name = name;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.birthDay = birthDay;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     @Override</span></p>

<p class=MsoNormal><span lang=EN-US>     public int hashCode() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return Objects.hash(birthDay,
name);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     @Override</span></p>

<p class=MsoNormal><span lang=EN-US>     public boolean equals(Object obj) {</span></p>

<p class=MsoNormal><span lang=EN-US>          if (this == obj)</span></p>

<p class=MsoNormal><span lang=EN-US>               return true;</span></p>

<p class=MsoNormal><span lang=EN-US>          if (obj == null)</span></p>

<p class=MsoNormal><span lang=EN-US>               return false;</span></p>

<p class=MsoNormal><span lang=EN-US>          if (getClass() != obj.getClass())</span></p>

<p class=MsoNormal><span lang=EN-US>               return false;</span></p>

<p class=MsoNormal><span lang=EN-US>          Person other = (Person) obj;</span></p>

<p class=MsoNormal><span lang=EN-US>          return Objects.equals(birthDay,
other.birthDay) &amp;&amp; Objects.equals(name, other.name);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>テスト開始</span></p>

<p class=MsoNormal><span lang=EN-US>     public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>          Person p1 = new Person(&quot;</span><span
style='font-family:メイリオ'>令和太朗</span><span lang=EN-US>&quot;, LocalDate.of(2000,
1, 1));</span></p>

<p class=MsoNormal><span lang=EN-US>          Person p2 = new Person(&quot;</span><span
style='font-family:メイリオ'>令和太朗</span><span lang=EN-US>&quot;, LocalDate.of(2000,
1, 1));</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>          if (p1 == p2) {</span></p>

<p class=MsoNormal><span lang=EN-US>               //</span><span
style='font-family:メイリオ'>実行されません</span></p>

<p class=MsoNormal><span lang=EN-US>          } else {</span></p>

<p class=MsoNormal><span lang=EN-US>               System.out.println(&quot;</span><span
style='font-family:メイリオ'>同名・同生年月日でも同一ではありません</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>          if (p1.equals(p2)) {</span></p>

<p class=MsoNormal><span lang=EN-US>               System.out.println(&quot;</span><span
style='font-family:メイリオ'>同名・同生年月日なら同値です</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          } else {</span></p>

<p class=MsoNormal><span lang=EN-US>               //</span><span
style='font-family:メイリオ'>実行されません</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>          </span></p>

<p class=MsoNormal><span lang=EN-US>          Person p3 = p1;</span></p>

<p class=MsoNormal><span lang=EN-US>          if (p1 == p3) {</span></p>

<p class=MsoNormal><span lang=EN-US>               System.out.println(&quot;</span><span
style='font-family:メイリオ'>同一です</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>               </span></p>

<p class=MsoNormal><span lang=EN-US>          </span></p>

<p class=MsoNormal><span lang=EN-US>          Integer integer1 = new
Integer(1);</span></p>

<p class=MsoNormal><span lang=EN-US>          Integer integer2 = new
Integer(1);</span></p>

<p class=MsoNormal><span lang=EN-US>          </span></p>

<p class=MsoNormal><span lang=EN-US>          if (integer1 == integer2) {</span></p>

<p class=MsoNormal><span lang=EN-US>               //</span><span
style='font-family:メイリオ'>実行されません</span></p>

<p class=MsoNormal><span lang=EN-US>          } else {</span></p>

<p class=MsoNormal><span lang=EN-US>               System.out.println(&quot;</span><span
style='font-family:メイリオ'>同じ整数値でも同一ではありません。別のインスタンスです</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>          if (integer1.equals(integer2)) {</span></p>

<p class=MsoNormal><span lang=EN-US>               System.out.println(&quot;</span><span
style='font-family:メイリオ'>同じ整数値なら同値です</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          } else {</span></p>

<p class=MsoNormal><span lang=EN-US>               //</span><span
style='font-family:メイリオ'>実行されません</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ここでは同値性の判定に名前と生年月日を使いましたが、</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>もし</span><span lang=EN-US>Person</span><span
style='font-family:メイリオ'>クラスのインスタンスの同値性の判定に生年月日を使用したくない、というような場合には、</span></p>

<p class=MsoNormal><span lang=EN-US>Person#equalse</span><span
style='font-family:メイリオ'>メソッドを変更します。そこでどの属性を使うかを指定できます。上のサンプルコードの</span><span
lang=EN-US> equals </span><span style='font-family:メイリオ'>メソッドを確認してください。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761542"><span lang=EN-US>5.19 </span>クラス</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.19.1 </span>クラスを定義する</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトを生成するための雛形としてクラスを定義します。</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>はインスタンスを生成するためにクラス定義から</span><span
lang=EN-US> new </span><span style='font-family:メイリオ'>するクラスベースのプログラミング言語です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>プロトタイプベースの言語などもあります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（クラス定義の主要な要素）</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>クラス名</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>フィールド</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>メソッド</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>コンストラクタ</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>【練習】ここで</span><span
lang=EN-US>UML</span><span style='font-family:メイリオ'>クラス図を書いてみましょう。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.19.2 </span>アクセス制御</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>public     </span><span style='font-family:メイリオ'>全てのクラスからのアクセスを許します。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>protected  </span><span style='font-family:メイリオ'>サブクラス、同じパッケージ内からのアクセスを許します。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>private    </span><span style='font-family:メイリオ'>そのクラス以外からのアクセスを許しません。（データの隠蔽）</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>指定なし</span><span lang=EN-US>   </span><span
style='font-family:メイリオ'>アクセス修飾子無しの場合、同じパッケージ内のコードからのみアクセス出来ます。</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>（注）クラス単位であってインスタンス単位ではありません。ちなみにインスタンス単位の言語もあります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.19.3 </span>オブジェクトの生成</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>同一性と同値性のサンプルコードに含まれていた</span></p>

<p class=MsoNormal><span lang=EN-US>Person p1 = new Person(&quot;</span><span
style='font-family:メイリオ'>令和太朗</span><span lang=EN-US>&quot;, LocalDate.of(2000,
1, 1));</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>や</span></p>

<p class=MsoNormal><span lang=EN-US>Integer integer1 = new Integer(1);</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.19.4 </span>コンストラクタ</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>新しく生成されたオブジェクトは初期値を持ちます。</span>
</p>

<p class=MsoNormal><span style='font-family:メイリオ'>フィールド（属性、プロパティ）は、タイプに応じて</span><span
lang=EN-US>\u0000</span><span style='font-family:メイリオ'>、</span><span
lang=EN-US>false</span><span style='font-family:メイリオ'>、</span><span lang=EN-US>null</span><span
style='font-family:メイリオ'>に単純に初期化されます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これ以外の初期化を行う場合は、コンストラクタの中に初期化のコードを書きます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタはクラス名と同じ名前を持ちます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドではないので戻り値は持ちません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>引数を持たないコンストラクタはデフォルトコンストラクタと呼びます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>複数のコンストラクタを持つことができます。（オーバーロード、後述）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタを持たないクラスには、</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>言語がなにもしないパラメータなしのコンストラクタを用意します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>public Person(String name, LocalDate
birthDate) {</span></p>

<p class=MsoNormal><span lang=EN-US>     super();</span></p>

<p class=MsoNormal><span lang=EN-US>     this.name = name;</span></p>

<p class=MsoNormal><span lang=EN-US>     this.birthDate = birthDate;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.19.5 </span>メソッド</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>分析、設計モデルの操作に相当します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.LocalDate;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.Period;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class Person {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String name;</span></p>

<p class=MsoNormal><span lang=EN-US>     private LocalDate birthDay;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public Person(String name, LocalDate
birthDay) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.name = name;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.birthDay = birthDay;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>テスト開始</span></p>

<p class=MsoNormal><span lang=EN-US>     public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>          Person p1 = new Person(&quot;</span><span
style='font-family:メイリオ'>令和太朗</span><span lang=EN-US>&quot;, LocalDate.of(2000,
1, 1));</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;</span><span
style='font-family:メイリオ'>現在の年齢は</span><span lang=EN-US> &quot; + p1.getAge());</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>自分の年齢を応答する</span></p>

<p class=MsoNormal><span lang=EN-US>     public int getAge() {</span></p>

<p class=MsoNormal><span lang=EN-US>          if ((this.birthDay != null)) {</span></p>

<p class=MsoNormal><span lang=EN-US>               LocalDate currentDate =
LocalDate.now();</span></p>

<p class=MsoNormal><span lang=EN-US>               return
Period.between(this.birthDay, currentDate).getYears();</span></p>

<p class=MsoNormal><span lang=EN-US>          } else {</span></p>

<p class=MsoNormal><span lang=EN-US>               return -1;</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.19.6 </span>メソッドのオーバーロード</h3>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドのシグネチャとはメソッド名、パラメータの数とタイプの組合せです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>シグネチャが異なれば、同じ名前のメソッドを複数定義できます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>下の例では、同じ操作名</span><span
lang=EN-US>getAge</span><span style='font-family:メイリオ'>がオーバーロードされています。</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_2;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.LocalDate;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.time.Period;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class Person {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String name;</span></p>

<p class=MsoNormal><span lang=EN-US>     private LocalDate birthDay;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>コンストラクタ</span></p>

<p class=MsoNormal><span lang=EN-US>     public Person(String name, LocalDate
birthDay) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.name = name;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.birthDay = birthDay;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>テスト開始</span></p>

<p class=MsoNormal><span lang=EN-US>     public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>          Person p1 = new Person(&quot;</span><span
style='font-family:メイリオ'>令和太朗</span><span lang=EN-US>&quot;, LocalDate.of(2000,
1, 1));</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;</span><span
style='font-family:メイリオ'>現在の年齢は</span><span lang=EN-US> &quot; + p1.getAge());</span></p>

<p class=MsoNormal><span lang=EN-US>          </span></p>

<p class=MsoNormal><span lang=EN-US>          LocalDate targetDay =
LocalDate.of(2030, 12, 31);</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(targetDay +
&quot;</span><span style='font-family:メイリオ'>時点の年齢は</span><span lang=EN-US>
&quot; + p1.getAge(targetDay));</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>現在の年齢を応答する</span></p>

<p class=MsoNormal><span lang=EN-US>     public int getAge() {</span></p>

<p class=MsoNormal><span lang=EN-US>          if (this.birthDay != null) {</span></p>

<p class=MsoNormal><span lang=EN-US>               LocalDate currentDate =
LocalDate.now();</span></p>

<p class=MsoNormal><span lang=EN-US>               return
Period.between(this.birthDay, currentDate).getYears();</span></p>

<p class=MsoNormal><span lang=EN-US>          } else {</span></p>

<p class=MsoNormal><span lang=EN-US>               return -1;</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>指定された年月日時点の年齢を応答する</span></p>

<p class=MsoNormal><span lang=EN-US>     public int getAge(LocalDate targetDay)
{</span></p>

<p class=MsoNormal><span lang=EN-US>          if ((this.birthDay != null)
&amp;&amp; (targetDay != null)) {</span></p>

<p class=MsoNormal><span lang=EN-US>               return
Period.between(this.birthDay, targetDay).getYears();</span></p>

<p class=MsoNormal><span lang=EN-US>          } else {</span></p>

<p class=MsoNormal><span lang=EN-US>               return -1;</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタもオーバーロードできます。</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h3><span lang=EN-US>5.19.7 </span>クラスメンバーとインスタンスメンバー</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>クラスメンバー</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>クラス変数とクラスメソッドのことです。</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>クラス変数（</span><span lang=EN-US>static</span><span
style='font-family:メイリオ'>変数）</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>そのクラスに対して１個だけ存在します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>インスタンスが１つも生成されていない状態でも存在します。</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>クラスメソッド</span></h6>

<p class=MsoNormal><span lang=EN-US>static</span><span style='font-family:メイリオ'>メソッド。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>そのクラスに対して唯一つ存在します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドへのアクセスはオブジェクト参照ではなく、クラス名を使います。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト参照ではないので、</span><span
lang=EN-US>this</span><span style='font-family:メイリオ'>は使用できません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>インスタンスメンバー</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>インスタンス変数とインスタンスメソッドのことです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>個々のインスタンス毎に存在します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_3;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>普通預金口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>クラス変数</span></p>

<p class=MsoNormal><span lang=EN-US>     private static double </span><span
style='font-family:メイリオ'>利率</span><span lang=EN-US> = 0.01;</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>インスタンス変数</span></p>

<p class=MsoNormal><span lang=EN-US>     private BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>名義名</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>クラスメソッド</span></p>

<p class=MsoNormal><span lang=EN-US>     public static double get</span><span
style='font-family:メイリオ'>利率</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return </span><span
style='font-family:メイリオ'>利率</span><span lang=EN-US>;  </span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>インスタンスメソッド</span></p>

<p class=MsoNormal><span lang=EN-US>     public BigDecimal get</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return this.</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.19.8 </span>ネイティブメソッド</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>java</span><span style='font-family:メイリオ'>言語以外で書かれたコードを使用するような場合、ネイティブメソッドを使うことができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（例）　</span><span lang=EN-US>C</span><span
style='font-family:メイリオ'>言語で作成したユーザ認証処理を、</span><span lang=EN-US>Java</span><span
style='font-family:メイリオ'>で作成するログイン処理から使用する。</span></p>

<p class=MsoNormal><span lang=EN-US>JNI</span><span style='font-family:メイリオ'>（</span><span
lang=EN-US>Java Native Interface</span><span style='font-family:メイリオ'>）</span> </p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761543"><span lang=EN-US>5.20 </span>クラスの拡張</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span><span lang=EN-US>
5.11</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>この例のドメインは、銀行口座の管理業務です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>管理できる口座はすべて同じ銀行の口座とします。つまり、同じネットバンキングサービスを利用します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>残高を参照するための</span><span
lang=EN-US>API</span><span style='font-family:メイリオ'>は普通預金用と定期預金用の２つがあります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=602 height=244 id="図 48"
src="OOT.files/image046.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_6;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public abstract class </span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     protected </span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US>(String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US> = new BigDecimal(0);</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;[INFO] </span><span
style='font-family:メイリオ'>口座コンストラクタを実行</span><span lang=EN-US> : </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>=&quot; + </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public String get</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void set</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>(String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     public BigDecimal get</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void set</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>(BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>抽象メソッド</span></p>

<p class=MsoNormal><span lang=EN-US>     public abstract void </span><span
style='font-family:メイリオ'>残高を最新にする</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_6;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>普通預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>普通預金口座</span><span lang=EN-US> extends </span><span style='font-family:
メイリオ'>口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     public </span><span style='font-family:
メイリオ'>普通預金口座</span><span lang=EN-US>(String </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          super(</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;[INFO] </span><span
style='font-family:メイリオ'>普通預金口座コンストラクタを実行</span><span lang=EN-US> : </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>=&quot; + </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>抽象メソッドの実装</span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>残高を最新にする</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;[INFO] </span><span
style='font-family:メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span
style='font-family:メイリオ'>で普通預金口座の残高を最新にしました。</span><span lang=EN-US> : </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>=&quot; + this.get</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>());</span></p>

<p class=MsoNormal><span lang=EN-US>          BigDecimal </span><span
style='font-family:メイリオ'>最新残高</span><span lang=EN-US> = new BigDecimal(100); //</span><span
style='font-family:メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span
style='font-family:メイリオ'>で取得する</span></p>

<p class=MsoNormal><span lang=EN-US>          this.set</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>最新残高</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_6;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>定期預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>定期預金口座</span><span lang=EN-US> extends </span><span style='font-family:
メイリオ'>口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     private int </span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public </span><span style='font-family:
メイリオ'>定期預金口座</span><span lang=EN-US>(String </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>, int </span><span style='font-family:メイリオ'>期間</span><span
lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          super(</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;[INFO] </span><span
style='font-family:メイリオ'>定期預金口座コンストラクタを実行</span><span lang=EN-US> : </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>=&quot; + </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>抽象メソッドの実装</span></p>

<p class=MsoNormal><span lang=EN-US>     public void </span><span
style='font-family:メイリオ'>残高を最新にする</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;[INFO] </span><span
style='font-family:メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span
style='font-family:メイリオ'>で定期預金口座の残高を最新にしました。</span><span lang=EN-US> : </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>=&quot; + this.get</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>());</span></p>

<p class=MsoNormal><span lang=EN-US>          BigDecimal </span><span
style='font-family:メイリオ'>最新残高</span><span lang=EN-US> = new BigDecimal(100); //</span><span
style='font-family:メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span
style='font-family:メイリオ'>で取得する</span></p>

<p class=MsoNormal><span lang=EN-US>          this.set</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>最新残高</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public int get</span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return </span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     public void set</span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US>(int </span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_6;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.ArrayList;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>口座管理者</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class </span><span style='font-family:
メイリオ'>口座管理者</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     private static ArrayList&lt;</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US>&gt; </span><span
style='font-family:メイリオ'>口座リスト</span><span lang=EN-US> = new
ArrayList&lt;&gt;();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>     //Java</span><span style='font-family:
メイリオ'>アプリケーション開始メソッド</span></p>

<p class=MsoNormal><span lang=EN-US>     public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;--- </span><span
style='font-family:メイリオ'>テスト開始</span><span lang=EN-US> ---&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          </span><span style='font-family:
メイリオ'>口座管理者</span> <span style='font-family:メイリオ'>管理者</span><span lang=EN-US> =
new </span><span style='font-family:メイリオ'>口座管理者</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>          </span><span style='font-family:
メイリオ'>管理者</span><span lang=EN-US>.doTest();</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;--- </span><span
style='font-family:メイリオ'>テスト終了</span><span lang=EN-US> ---&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>テストする</span></p>

<p class=MsoNormal><span lang=EN-US>     private void doTest() {</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;--- </span><span
style='font-family:メイリオ'>この会社が所有しているすべての口座情報を追加します</span><span lang=EN-US>
---&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          this.add</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US>(new </span><span
style='font-family:メイリオ'>普通預金口座</span><span lang=EN-US>(&quot;1001&quot;));</span></p>

<p class=MsoNormal><span lang=EN-US>          this.add</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US>(new </span><span
style='font-family:メイリオ'>普通預金口座</span><span lang=EN-US>(&quot;1002&quot;));</span></p>

<p class=MsoNormal><span lang=EN-US>          this.add</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US>(new </span><span
style='font-family:メイリオ'>定期預金口座</span><span lang=EN-US>(&quot;8001&quot;, 3));</span></p>

<p class=MsoNormal><span lang=EN-US>          </span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;--- </span><span
style='font-family:メイリオ'>すべての口座の残高を最新にします</span><span lang=EN-US> ---&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>          for(</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US> kouza : </span><span
style='font-family:メイリオ'>口座リスト</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>               kouza.</span><span
style='font-family:メイリオ'>残高を最新にする</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span lang=EN-US>          //for</span><span
style='font-family:メイリオ'>文ではなく</span><span lang=EN-US>Stream</span><span
style='font-family:メイリオ'>を使った場合</span></p>

<p class=MsoNormal><span lang=EN-US>          </span><span style='font-family:
メイリオ'>口座リスト</span><span lang=EN-US>.stream().forEach(k -&gt; k.</span><span
style='font-family:メイリオ'>残高を最新にする</span><span lang=EN-US>());</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     public void add</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US> kouza) {</span></p>

<p class=MsoNormal><span lang=EN-US>          </span><span style='font-family:
メイリオ'>口座リスト</span><span lang=EN-US>.add(kouza);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>--- </span><span style='font-family:メイリオ'>テスト開始</span><span
lang=EN-US> ---</span></p>

<p class=MsoNormal><span lang=EN-US>--- </span><span style='font-family:メイリオ'>この会社が所有しているすべての口座情報を追加します</span><span
lang=EN-US> ---</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>口座コンストラクタを実行</span><span lang=EN-US> : </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>=1001</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>普通預金口座コンストラクタを実行</span><span lang=EN-US> : </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>=1001</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>口座コンストラクタを実行</span><span lang=EN-US> : </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>=1002</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>普通預金口座コンストラクタを実行</span><span lang=EN-US> : </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>=1002</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>口座コンストラクタを実行</span><span lang=EN-US> : </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>=8001</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>定期預金口座コンストラクタを実行</span><span lang=EN-US> : </span><span style='font-family:
メイリオ'>口座番号</span><span lang=EN-US>=8001</span></p>

<p class=MsoNormal><span lang=EN-US>--- </span><span style='font-family:メイリオ'>すべての口座の残高を最新にします</span><span
lang=EN-US> ---</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span style='font-family:メイリオ'>で普通預金口座の残高を最新にしました。</span><span
lang=EN-US> : </span><span style='font-family:メイリオ'>口座番号</span><span
lang=EN-US>=1001</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span style='font-family:メイリオ'>で普通預金口座の残高を最新にしました。</span><span
lang=EN-US> : </span><span style='font-family:メイリオ'>口座番号</span><span
lang=EN-US>=1002</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span style='font-family:メイリオ'>で定期預金口座の残高を最新にしました。</span><span
lang=EN-US> : </span><span style='font-family:メイリオ'>口座番号</span><span
lang=EN-US>=8001</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span style='font-family:メイリオ'>で普通預金口座の残高を最新にしました。</span><span
lang=EN-US> : </span><span style='font-family:メイリオ'>口座番号</span><span
lang=EN-US>=1001</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span style='font-family:メイリオ'>で普通預金口座の残高を最新にしました。</span><span
lang=EN-US> : </span><span style='font-family:メイリオ'>口座番号</span><span
lang=EN-US>=1002</span></p>

<p class=MsoNormal><span lang=EN-US>[INFO] </span><span style='font-family:
メイリオ'>ネットバンキング</span><span lang=EN-US>API</span><span style='font-family:メイリオ'>で定期預金口座の残高を最新にしました。</span><span
lang=EN-US> : </span><span style='font-family:メイリオ'>口座番号</span><span
lang=EN-US>=8001</span></p>

<p class=MsoNormal><span lang=EN-US>--- </span><span style='font-family:メイリオ'>テスト終了</span><span
lang=EN-US> ---</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>

<table cellpadding=0 cellspacing=0 align=left>
 <tr>
  <td width=20 height=1></td>
 </tr>
 <tr>
  <td></td>
  <td><img width=329 height=92 src="OOT.files/image047.png"
  alt="ここから更新ポイント 2024-7-18"></td>
 </tr>
</table>

<span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<br clear=ALL>

<h3><span lang=EN-US>5.20.1 </span><span lang=EN-US>this</span>と<span
lang=EN-US>super</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>this</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>非</span><span lang=EN-US>static</span><span
style='font-family:メイリオ'>メソッドの中で、自分自身を指すオブジェクト参照です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>super</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>非</span><span lang=EN-US>static</span><span
style='font-family:メイリオ'>メソッドの中で、カレントオブジェクトをスーパークラスのインスタンスと見なしたときの参照です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.20.2 </span>継承（拡張）とポリモルフィズム</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>口座クラスが使用できるところでは、そのサブクラスである普通預金口座も同様に扱えます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>拡張されたクラス（普通預金口座や定期預金口座</span><span
lang=EN-US>)</span><span style='font-family:メイリオ'>も元のクラス（口座）と同様に扱えます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>同様に扱えるとは、口座クラスと同じ責務を果たせるということです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.20.3 </span>メソッドのオーバーライド</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オーバーライドとは、サブクラスで親クラスのメソッドを再定義することです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>この際、オーバーライドするメソッドは親クラスのメソッドと同じ「メソッドのシグニチャ」（メソッド名、引数の数と型、戻り値の型）を持つ必要があります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これにより、サブクラスで同じ名前のメソッドを定義することで、そのメソッドが呼び出された際には、サブクラスの定義が優先されるようになります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オーバーライドする際には戻り値の型も含めて「メソッドのシグニチャ」が完全に一致している必要があります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>つまり、メソッド名と引数の数と型、そして戻り値の型が親クラスのメソッドと完全に一致していなければなりません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（注）</span><span lang=EN-US>static</span><span
style='font-family:メイリオ'>メソッドはオーバーライド出来ません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>（注）オーバーロードとは、同じクラス内またはサブクラスで、同じメソッド名で複数の異なるシグニチャ（メソッド名、引数の数や型）を持つことです。これにより、同じメソッド名で異なる引数を受け取るメソッドを複数定義することができます。オーバーロードされたメソッドは、引数の型や数が異なるため、コンパイラがどのメソッドを呼び出すかを解決します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.20.4 </span>メソッド結合</h3>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>動的メソッド結合</span><span lang=EN-US>(Dynamic
method binding)</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクト指向プログラミングの本質的な部分です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span><span lang=EN-US>
5.11</span><span style='font-family:メイリオ'>の口座管理者クラスの</span><span lang=EN-US>main</span><span
style='font-family:メイリオ'>メソッドの中に次のコードがあります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>実行すると、普通預金口座または定期預金口座の「残高を最新にする</span><span
lang=EN-US>()</span><span style='font-family:メイリオ'>」メソッドが呼び出されます（メソッド結合）</span></p>

<p class=MsoNormal><span lang=EN-US>          for(</span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US> kouza : </span><span
style='font-family:メイリオ'>口座リスト</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>               kouza.</span><span
style='font-family:メイリオ'>残高を最新にする</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>          }</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ちなみに</span></p>

<p class=MsoNormal><span lang=EN-US>Smalltalk</span><span style='font-family:
メイリオ'>の場合は常に動的メソッド結合を行います。</span></p>

<p class=MsoNormal><span lang=EN-US>C++</span><span style='font-family:メイリオ'>の場合は、</span><span
lang=EN-US>virtual</span><span style='font-family:メイリオ'>関数（仮想関数）を使用した場合には、動的メソッド結合になります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>静的メソッド結合</span><span lang=EN-US>(Static
method binding)</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>コンパイル時に呼出すメソッドを決定します。</span></p>

<p class=MsoNormal><span lang=EN-US>C</span><span style='font-family:メイリオ'>などの関数呼出しと同じになり、実行効率はあがりますが、プログラミングに制約が生じます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.20.5 </span>同じフィールド名</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>スーパークラスと同じ名前のフィールドを定義すると、スーパークラスのフィールドは残りますが、単に名前を使っただけではアクセス出来なくなります。</span><span
lang=EN-US> super</span><span style='font-family:メイリオ'>などの参照を用いなければなりません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜例＞</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_7;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>最初にコマンドラインから始動されるクラス</span>
</p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;ClassA</span><span
style='font-family:メイリオ'>のインスタンスを生成する</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_a = new ClassA();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;public</span><span
style='font-family:メイリオ'>フィールド参照の場合、</span><span lang=EN-US>ref_a.same_name=&quot;
+ ref_a.same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>メソッド参照の場合、</span><span lang=EN-US>ref_a.getSameName()=&quot;
+ ref_a.getSameName());</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>メソッド参照の場合、</span><span lang=EN-US>ref_a.getSameName2()=&quot;
+ ref_a.getSameName2());</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;\nClassB</span><span
style='font-family:メイリオ'>のインスタンスを生成する</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = new ClassB();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;public</span><span
style='font-family:メイリオ'>フィールド参照の場合、</span><span lang=EN-US>ref_b.same_name=&quot;
+ ref_b.same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>メソッド参照の場合、</span><span lang=EN-US>ref_b.getSameName()=&quot;
+ ref_b.getSameName());</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>メソッド参照の場合、</span><span lang=EN-US>ref_b.getSameName2()=&quot;
+ ref_b.getSameName2());</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;\nref_a</span><span
style='font-family:メイリオ'>に</span><span lang=EN-US>ref_b</span><span
style='font-family:メイリオ'>を代入する</span><span lang=EN-US>(</span><span
style='font-family:メイリオ'>キャストする</span><span lang=EN-US>)&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        if (ref_b instanceof ClassB) { </span></p>

<p class=MsoNormal><span lang=EN-US>            ref_a = ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;public</span><span
style='font-family:メイリオ'>フィールド参照の場合、</span><span lang=EN-US>ref_a.same_name=&quot;
+ ref_a.same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>メソッド参照の場合、</span><span lang=EN-US>ref_a.getSameName()=&quot;
+ ref_a.getSameName());</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>メソッド参照の場合、</span><span lang=EN-US>ref_a.getSameName2()=&quot;
+ ref_a.getSameName2());</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>スーパークラス</span><span
lang=EN-US> ClassA</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassA extends Object {</span></p>

<p class=MsoNormal><span lang=EN-US>    String same_name;</span></p>

<p class=MsoNormal><span lang=EN-US>    public String getSameName() {</span></p>

<p class=MsoNormal><span lang=EN-US>        return (same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public String getSameName2() {</span></p>

<p class=MsoNormal><span lang=EN-US>        return (same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA() {</span></p>

<p class=MsoNormal><span lang=EN-US>        same_name = &quot;A&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassA()</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> *  ClassA </span><span style='font-family:
メイリオ'>のサブクラス</span><span lang=EN-US> ClassB</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassB extends ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    String same_name;</span></p>

<p class=MsoNormal><span lang=EN-US>    public String getSameName2() {  //</span><span
style='font-family:メイリオ'>オーバーライドしたメソッド</span></p>

<p class=MsoNormal><span lang=EN-US>        return (same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassB() {</span></p>

<p class=MsoNormal><span lang=EN-US>        same_name = &quot;B&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassB()</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassB()</span><span
style='font-family:メイリオ'>中から</span><span lang=EN-US> same_name=&quot; +
same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassB()</span><span
style='font-family:メイリオ'>中から</span><span lang=EN-US> super.same_name=&quot; +
super.same_name);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜実行結果＞</span></p>

<p class=MsoNormal><span lang=EN-US>ClassB</span><span style='font-family:メイリオ'>のインスタンスを生成する</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassA()</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassB()</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassB()</span><span style='font-family:メイリオ'>中から</span><span
lang=EN-US> same_name=B</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassB()</span><span style='font-family:メイリオ'>中から</span><span
lang=EN-US> super.same_name=A</span></p>

<p class=MsoNormal><span lang=EN-US>public</span><span style='font-family:メイリオ'>フィールド参照の場合、</span><span
lang=EN-US>ref_b.same_name=B</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッド参照の場合、</span><span
lang=EN-US>ref_b.getSameName()=A</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッド参照の場合、</span><span
lang=EN-US>ref_b.getSameName2()=B</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ref_a</span><span style='font-family:メイリオ'>に</span><span
lang=EN-US>ref_b</span><span style='font-family:メイリオ'>を代入する</span><span
lang=EN-US>(</span><span style='font-family:メイリオ'>キャストする</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>public</span><span style='font-family:メイリオ'>フィールド参照の場合、</span><span
lang=EN-US>ref_a.same_name=A</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッド参照の場合、</span><span
lang=EN-US>ref_a.getSameName()=A</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッド参照の場合、</span><span
lang=EN-US>ref_a.getSameName2()=B</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜実行結果はここまで＞</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>既存のスーパークラス（</span><span
lang=EN-US>ClassA</span><span style='font-family:メイリオ'>）の実装者が、（既に開発済みの）サブクラスを破壊せずに新しい</span><span
lang=EN-US>public</span><span style='font-family:メイリオ'>、</span><span
lang=EN-US>protected</span><span style='font-family:メイリオ'>フィールドを追加できるように、このような仕様になっているようです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドの場合、参照のタイプではなく、実際のタイプで呼出されます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>フィールドの場合、実際のタイプではなく、参照の宣言タイプで決定されます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>アクセサメソッドによってアクセスするように設計すべきです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.20.6 </span>タイプ変換</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>は強い型付けの言語です。（コンパイル時にほとんどの場合に対してタイプチェックが行われます）</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>ワイディング、キャストアップ、安全なキャスト</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>＜例＞</span></p>

<p class=MsoNormal><span lang=EN-US>class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_a = new ClassB(); //</span><span
style='font-family:メイリオ'>安全なキャスト</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassB extends ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassB() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>ナローイング、キャストダウン、安全ではないキャスト</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース１</span></p>

<p class=MsoNormal><span lang=EN-US>class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_a = new ClassB();   //</span><span
style='font-family:メイリオ'>安全なキャスト</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = (ClassB)ref_a;   //</span><span
style='font-family:メイリオ'>ナローイング</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース２</span></p>

<p class=MsoNormal><span lang=EN-US>class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_a = new ClassB();   //</span><span
style='font-family:メイリオ'>安全なキャスト</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = (ClassB)ref_a;  //</span><span
style='font-family:メイリオ'>ナローイング</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜ケース２のコンパイル結果＞</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Starter.java:7: </span><span
style='font-family:メイリオ'>互換性のない型</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>出現</span><span lang=EN-US>:
ClassA</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>要求</span><span lang=EN-US>:
ClassB</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = ref_a;    ^</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>エラー</span><span lang=EN-US> 1
</span><span style='font-family:メイリオ'>個</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース３</span></p>

<p class=MsoNormal><span lang=EN-US>class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_a = new ClassA();</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = (ClassB)ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜ケース３の実行結果＞</span></p>

<p class=MsoNormal><span lang=EN-US>Exception in thread &quot;main&quot;
java.lang.ClassCastException: ClassA</span></p>

<p class=MsoNormal><span lang=EN-US>        at Starter.main(Starter.java:6)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.20.7 </span><span lang=EN-US>instanceof</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_a = new ClassA();</span></p>

<p class=MsoNormal><span lang=EN-US>        if (ref_a instanceof ClassB) {</span></p>

<p class=MsoNormal><span lang=EN-US>            ref_b = (ClassB)ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.20.8 </span>拡張したクラスのコンストラクタ</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>スーパークラスのコンストラクタを、新しいクラスの最初の実行文で呼出さない場合は、他の命令が実行される前に自動的にスーパークラスの引数なしコンストラクタが呼出されます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース</span><span lang=EN-US>1</span></p>

<p class=MsoNormal><span lang=EN-US>public class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;ClassB</span><span
style='font-family:メイリオ'>のインスタンスを生成する</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = new ClassB();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassA()</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassB extends ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassB() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassB()</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜ケース１の実行結果＞</span></p>

<p class=MsoNormal><span lang=EN-US>ClassB</span><span style='font-family:メイリオ'>のインスタンスを生成する</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassA()</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassB()</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース２</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース１の</span><span lang=EN-US>ClassB</span><span
style='font-family:メイリオ'>のコンストラクタの</span><span lang=EN-US>1</span><span
style='font-family:メイリオ'>行目に</span><span lang=EN-US>super(); </span><span
style='font-family:メイリオ'>はなくても実行結果は同じですが、デフォルトコンストラクタ（引数なしコンストラクタ）以外を実行する必要がある場合は、必ず</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>行目に書く必要があります。　通常、デフォルトコンストラクタであっても</span><span
lang=EN-US>1</span><span style='font-family:メイリオ'>行目に</span><span lang=EN-US>super();
</span><span style='font-family:メイリオ'>を書くことが推奨されます。</span></p>

<p class=MsoNormal><span lang=EN-US>public class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a;</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassB ref_b;</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;ClassB</span><span
style='font-family:メイリオ'>のインスタンスを生成する</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        ref_b = new ClassB();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA() {</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassA()</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA(int i) {</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassA(int i)</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassB extends ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassB() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super(1);  //</span><span
style='font-family:メイリオ'>デフォルトコンストラクタ以外を実行する</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassB()</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜ケース２の実行結果＞</span></p>

<p class=MsoNormal><span lang=EN-US>ClassB</span><span style='font-family:メイリオ'>のインスタンスを生成する</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassA(int i)</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassB()</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>this()</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース３</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>自分のコンストラクタを実行する。</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA() {</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassA()</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA(int i) {</span></p>

<p class=MsoNormal><span lang=EN-US>        this();    //</span><span
style='font-family:メイリオ'>自分のコンストラクタを実行する</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println (&quot;</span><span
style='font-family:メイリオ'>コンストラクタ</span><span lang=EN-US>ClassA(int i)</span><span
style='font-family:メイリオ'>が実行された</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ケース３の実行結果</span></p>

<p class=MsoNormal><span lang=EN-US>ClassB</span><span style='font-family:メイリオ'>のインスタンスを生成する</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassA()</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassA(int i)</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタ</span><span
lang=EN-US>ClassB()</span><span style='font-family:メイリオ'>が実行された</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>super()</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>コンストラクタの最初に</span><span
lang=EN-US>super()</span><span style='font-family:メイリオ'>や</span><span
lang=EN-US>super(</span><span style='font-family:メイリオ'>…</span><span
lang=EN-US>)</span><span style='font-family:メイリオ'>がない場合は、</span><span
lang=EN-US>super()</span><span style='font-family:メイリオ'>が実行されます。</span> <span
style='font-family:メイリオ'>もし、スーパークラスに引数なしコンストラクタが定義されていない場合は、コンパイルエラー「適合するコンストラクタがない」となります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761544"><span lang=EN-US>5.21 </span><span lang=EN-US>final</span>宣言</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドやクラスを</span><span
lang=EN-US>final</span><span style='font-family:メイリオ'>宣言します。</span></p>

<p class=MsoNormal><span lang=EN-US>final</span><span style='font-family:メイリオ'>宣言されたクラスのサブクラスは作れません。</span></p>

<p class=MsoNormal><span lang=EN-US>final</span><span style='font-family:メイリオ'>クラスのメソッドは暗黙的に</span><span
lang=EN-US>final</span><span style='font-family:メイリオ'>です。</span></p>

<p class=MsoNormal><span lang=EN-US>final</span><span style='font-family:メイリオ'>宣言されたメソッドは、インライン展開など、最適化しやすくなります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * 5</span><span style='font-family:メイリオ'>年定期預金口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>class Fixed5YearsAccount extends FixedAccount
{</span></p>

<p class=MsoNormal><span lang=EN-US>    static final int </span><span
style='font-family:メイリオ'>期間</span><span lang=EN-US> = 5;</span></p>

<p class=MsoNormal><span lang=EN-US>    public Fixed5YearsAccount() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761545"><span lang=EN-US>5.22 </span><span lang=EN-US>Object</span>クラス</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全てのクラスは直接・間接に</span><span
lang=EN-US>java.lang.Object</span><span style='font-family:メイリオ'>クラスを拡張します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public boolean equals (Object obj)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>このオブジェクトと</span><span
lang=EN-US>obj</span><span style='font-family:メイリオ'>で参照されたオブジェクトの同値性を調べてみます。</span>
<span style='font-family:メイリオ'>デフォルトの実装では、オブジェクトはそれ自身に対してのみ同値です。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>pubulic int hashCode()</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトのハッシュ値を返します。</span> <span
style='font-family:メイリオ'>デフォルトの実装では異なるオブジェクトに対して、通常は、一意な値を返します。</span><span
lang=EN-US> Hashtable</span><span style='font-family:メイリオ'>オブジェクトにオブジェクトを格納するために使われます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>protected object clone()</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの複製を返します。</span> <span
style='font-family:メイリオ'>※</span><span lang=EN-US>cloneable</span><span
style='font-family:メイリオ'>インタフェース。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>pubulic final Class getClass()</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>そのオブジェクトが属するクラスを</span><span
lang=EN-US>Class</span><span style='font-family:メイリオ'>タイプのオブジェクトによって返します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>protected void finalize() throws Throwable</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ガーベッジコレクション時にオブジェクトを</span><span
lang=EN-US>finalize</span><span style='font-family:メイリオ'>します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761546"><span lang=EN-US>5.23 </span>ラッパクラス（<span
lang=EN-US>Wrapper Class</span>）</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>では数値や論理値を表わすのにクラスではなく</span><span
lang=EN-US>int</span><span style='font-family:メイリオ'>や</span><span lang=EN-US>boolean</span><span
style='font-family:メイリオ'>といった原始型（</span><span lang=EN-US>Primitive Type</span><span
style='font-family:メイリオ'>）が存在しま。</span> </p>

<p class=MsoNormal><span style='font-family:メイリオ'>ラッパクラスとして</span><span
lang=EN-US>Interger</span><span style='font-family:メイリオ'>や</span><span
lang=EN-US>Boolean</span><span style='font-family:メイリオ'>が用意されています。　</span><span
lang=EN-US>Integer</span><span style='font-family:メイリオ'>クラスは文字列を数値に変換する、</span><span
lang=EN-US>16</span><span style='font-family:メイリオ'>進表現を</span><span lang=EN-US>10</span><span
style='font-family:メイリオ'>進表現に変換する等の機能を提供します。</span> <span style='font-family:
メイリオ'>これらの機能が必要でなければ、原始型を使用する場合が多いようです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761547"><span lang=EN-US>5.24 </span><span lang=EN-US>Class</span>クラス</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>全てのクラスとインタフェースは自らを表わす</span><span
lang=EN-US>Class</span><span style='font-family:メイリオ'>オブジェクトを持ちます。</span> <span
style='font-family:メイリオ'>このオブジェクトはクラスやインタフェースに関する基本的な情報を調べたり、クラスの新しいオブジェクトを作るのに使われる</span><span
lang=EN-US>Class</span><span style='font-family:メイリオ'>クラスを使うことでプログラム中のタイプシステムをたどることができます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>関連</span> <span
style='font-family:メイリオ'>リフレクション</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.24.1 </span><span lang=EN-US>java.lang.Object</span>クラスの<span
lang=EN-US>getClass()</span>メソッド</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public final Class getClass()</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>オブジェクトの実行時クラスを返します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.24.2 </span><span lang=EN-US>Class</span>クラスのメソッド例</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>getFields() </span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>この</span><span lang=EN-US>
Class </span><span style='font-family:メイリオ'>オブジェクトが表すクラスまたはインタフェースのすべてのアクセス可能な</span><span
lang=EN-US> public </span><span style='font-family:メイリオ'>フィールドをリフレクトし、</span><span
lang=EN-US>Field </span><span style='font-family:メイリオ'>オブジェクトを保持している配列を返します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>getMethods() </span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>この</span><span lang=EN-US>
Class </span><span style='font-family:メイリオ'>オブジェクトが表すクラスまたはインタフェースのすべての</span><span
lang=EN-US> public </span><span style='font-family:メイリオ'>メンバメソッドをリフレクトし</span><span
lang=EN-US> Method </span><span style='font-family:メイリオ'>オブジェクトを格納している配列を返します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.24.3 </span>使用例</h3>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_8;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.lang.reflect.Method;</span></p>

<p class=MsoNormal><span lang=EN-US>class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        ClassA ref_a = new ClassA();</span></p>

<p class=MsoNormal><span lang=EN-US>        Class c = ref_a.getClass();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;ref_a is
an instance of &quot; + c.getName());</span></p>

<p class=MsoNormal><span lang=EN-US>        Method[] methods = c.getMethods();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;&lt;method
name list&gt;&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        for (int i=0; i&lt;methods.length;
i++) {</span></p>

<p class=MsoNormal><span lang=EN-US>           
System.out.println(&quot;[&quot; + i + &quot;] &quot; + methods[i].getName());</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class ClassA {</span></p>

<p class=MsoNormal><span lang=EN-US>    public ClassA() {</span></p>

<p class=MsoNormal><span lang=EN-US>        super();</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void methodA() {</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜実行結果＞</span></p>

<p class=MsoNormal><span lang=EN-US>ref_a is an instance of oop.chapt5_8.ClassA</span></p>

<p class=MsoNormal><span lang=EN-US>&lt;method name list&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>[0] methodA</span></p>

<p class=MsoNormal><span lang=EN-US>[1] wait</span></p>

<p class=MsoNormal><span lang=EN-US>[2] wait</span></p>

<p class=MsoNormal><span lang=EN-US>[3] wait</span></p>

<p class=MsoNormal><span lang=EN-US>[4] equals</span></p>

<p class=MsoNormal><span lang=EN-US>[5] toString</span></p>

<p class=MsoNormal><span lang=EN-US>[6] hashCode</span></p>

<p class=MsoNormal><span lang=EN-US>[7] getClass</span></p>

<p class=MsoNormal><span lang=EN-US>[8] notify</span></p>

<p class=MsoNormal><span lang=EN-US>[9] notifyAll</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761548"><span lang=EN-US>5.25 </span>抽象クラスと<span
lang=EN-US>abstract</span>メソッド</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>抽象クラスは</span><span
lang=EN-US>abstract</span><span style='font-family:メイリオ'>宣言したクラスです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラスで実装されていないメソッドは</span><span
lang=EN-US>abstract</span><span style='font-family:メイリオ'>宣言します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>１つでも</span><span lang=EN-US>abstract</span><span
style='font-family:メイリオ'>メソッドがある場合、そのクラスは</span><span lang=EN-US>abstract</span><span
style='font-family:メイリオ'>宣言する必要があります。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>package oop.chapt5_6;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.math.BigDecimal;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>口座</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>public abstract class </span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US> {</span></p>

<p class=MsoNormal><span lang=EN-US>     private String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     private BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     protected </span><span
style='font-family:メイリオ'>口座</span><span lang=EN-US>(String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US> = new BigDecimal(0);</span></p>

<p class=MsoNormal><span lang=EN-US>          System.out.println(&quot;[INFO] </span><span
style='font-family:メイリオ'>口座コンストラクタを実行</span><span lang=EN-US> : </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>=&quot; + </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public String get</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public void set</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>(String </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>口座番号</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public BigDecimal get</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>() {</span></p>

<p class=MsoNormal><span lang=EN-US>          return </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     public void set</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>(BigDecimal </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>) {</span></p>

<p class=MsoNormal><span lang=EN-US>          this.</span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US> = </span><span
style='font-family:メイリオ'>残高</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>     }</span></p>

<p class=MsoNormal><span lang=EN-US>     </span></p>

<p class=MsoNormal><span lang=EN-US>     //</span><span style='font-family:
メイリオ'>抽象メソッド</span></p>

<p class=MsoNormal><span lang=EN-US>     public abstract void </span><span
style='font-family:メイリオ'>残高を最新にする</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<h2><a name="_Toc173761549"><span lang=EN-US>5.26 </span>インタフェース</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>クラスは設計と実装が混合しているのに対して、インタフェースは純粋に設計のみを表現する。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドは全て暗黙的に</span><span
lang=EN-US>abstract</span><span style='font-family:メイリオ'>となる。（</span><span
lang=EN-US>abstract</span><span style='font-family:メイリオ'>は書かない）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドは全て</span><span
lang=EN-US>public</span><span style='font-family:メイリオ'>である。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>メソッドは</span><span lang=EN-US>static</span><span
style='font-family:メイリオ'>にはなり得ない。（</span><span lang=EN-US>static</span><span
style='font-family:メイリオ'>はクラスに対して定義できるもの）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>フィールドは全て</span><span
lang=EN-US>static</span><span style='font-family:メイリオ'>かつ</span><span
lang=EN-US>final</span><span style='font-family:メイリオ'>である。（</span><span
lang=EN-US>static</span><span style='font-family:メイリオ'>、</span><span
lang=EN-US>final</span><span style='font-family:メイリオ'>は書かない）</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>複数のインタフェースを実装できるため、インタフェースは多重継承を実現できる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>抽象クラスはメソッドの一部が実装されていてもよい。また、</span><span
lang=EN-US>protected</span><span style='font-family:メイリオ'>や</span><span
lang=EN-US>static</span><span style='font-family:メイリオ'>メソッドも持てる。しかし、インタフェースは、</span><span
lang=EN-US>public</span><span style='font-family:メイリオ'>メソッドと定数以外は持てない。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>インタフェース自身も</span><span
lang=EN-US>extends</span><span style='font-family:メイリオ'>により２つ以上のインタフェースから拡張できる。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜例＞</span></p>

<p class=MsoNormal><span lang=EN-US>import java.lang.reflect.*;</span></p>

<p class=MsoNormal><span lang=EN-US>import java.util.*;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * </span><span style='font-family:メイリオ'>最初に起動されるクラス</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>class Starter {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        Radio radio = new Radio();</span></p>

<p class=MsoNormal><span lang=EN-US>        Class c = radio.getClass();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;ref_a is
an instance of &quot; + c.getName());</span></p>

<p class=MsoNormal><span lang=EN-US>        Method[] methods = c.getMethods();</span></p>

<p class=MsoNormal><span lang=EN-US>        System.out.println(&quot;&lt;method
name list&gt;&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        for (int i=0; i&lt;methods.length;
i++) {</span></p>

<p class=MsoNormal><span lang=EN-US>           
System.out.println(&quot;[&quot; + i + &quot;] &quot; + methods[i].getName());</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>        if (radio instanceof Radio) {</span></p>

<p class=MsoNormal><span lang=EN-US>            System.out.println(&quot;radio</span><span
style='font-family:メイリオ'>は</span><span lang=EN-US>Radio</span><span
style='font-family:メイリオ'>クラスのインスタンスを参照している</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>        if (radio instanceof Recorder) {</span></p>

<p class=MsoNormal><span lang=EN-US>            System.out.println(&quot;radio</span><span
style='font-family:メイリオ'>は</span><span lang=EN-US>Recorder</span><span
style='font-family:メイリオ'>クラスのインスタンスを参照している</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>        if (radio instanceof Clock) {</span></p>

<p class=MsoNormal><span lang=EN-US>            System.out.println(&quot;radio</span><span
style='font-family:メイリオ'>は</span><span lang=EN-US>Clock</span><span
style='font-family:メイリオ'>クラスのインスタンスを参照している</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * Radio</span><span style='font-family:
メイリオ'>クラス</span></p>

<p class=MsoNormal><span lang=EN-US> * Recorder</span><span style='font-family:
メイリオ'>と</span><span lang=EN-US>Clock</span><span style='font-family:メイリオ'>を実装する</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>class Radio implements Recorder, Clock {</span></p>

<p class=MsoNormal><span lang=EN-US>    public Radio() {</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void tune(int station) {</span></p>

<p class=MsoNormal><span lang=EN-US>        //</span><span style='font-family:
メイリオ'>選局するためのコード</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void record() {</span></p>

<p class=MsoNormal><span lang=EN-US>        //Recorder</span><span
style='font-family:メイリオ'>の</span><span lang=EN-US>record(</span><span
style='font-family:メイリオ'>録音する</span><span lang=EN-US>)</span><span
style='font-family:メイリオ'>を実装するためのコード</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void play() {</span></p>

<p class=MsoNormal><span lang=EN-US>        //Recorder</span><span
style='font-family:メイリオ'>の</span><span lang=EN-US>play(</span><span
style='font-family:メイリオ'>再生する</span><span lang=EN-US>)</span><span
style='font-family:メイリオ'>を実装するためのコード</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public void setTime(Date time) {</span></p>

<p class=MsoNormal><span lang=EN-US>        //Clock</span><span
style='font-family:メイリオ'>の</span><span lang=EN-US>setTime(</span><span
style='font-family:メイリオ'>時刻を合わせる</span><span lang=EN-US>)</span><span
style='font-family:メイリオ'>を実装するためのコード</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>    public Date getTime() {</span></p>

<p class=MsoNormal><span lang=EN-US>        Date current = null;</span></p>

<p class=MsoNormal><span lang=EN-US>        //Clock</span><span
style='font-family:メイリオ'>の</span><span lang=EN-US>getTime(</span><span
style='font-family:メイリオ'>時刻を見る</span><span lang=EN-US>)</span><span
style='font-family:メイリオ'>を実装するためのコード</span></p>

<p class=MsoNormal><span lang=EN-US>        return current;</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * Recorder</span><span style='font-family:
メイリオ'>インタフェース</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>interface Recorder {</span></p>

<p class=MsoNormal><span lang=EN-US>    public void record(); </span></p>

<p class=MsoNormal><span lang=EN-US>    public void play(); </span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>/**</span></p>

<p class=MsoNormal><span lang=EN-US> * Clock</span><span style='font-family:
メイリオ'>インタフェース</span></p>

<p class=MsoNormal><span lang=EN-US> */</span></p>

<p class=MsoNormal><span lang=EN-US>interface Clock {</span></p>

<p class=MsoNormal><span lang=EN-US>    public void setTime(Date time);</span></p>

<p class=MsoNormal><span lang=EN-US>    public Date getTime();</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＜実行結果＞</span></p>

<p class=MsoNormal><span lang=EN-US>ref_a is an instance of oop.chapt5_9.Radio</span></p>

<p class=MsoNormal><span lang=EN-US>&lt;method name list&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>[0] setTime</span></p>

<p class=MsoNormal><span lang=EN-US>[1] getTime</span></p>

<p class=MsoNormal><span lang=EN-US>[2] tune</span></p>

<p class=MsoNormal><span lang=EN-US>[3] record</span></p>

<p class=MsoNormal><span lang=EN-US>[4] play</span></p>

<p class=MsoNormal><span lang=EN-US>[5] wait</span></p>

<p class=MsoNormal><span lang=EN-US>[6] wait</span></p>

<p class=MsoNormal><span lang=EN-US>[7] wait</span></p>

<p class=MsoNormal><span lang=EN-US>[8] equals</span></p>

<p class=MsoNormal><span lang=EN-US>[9] toString</span></p>

<p class=MsoNormal><span lang=EN-US>[10] hashCode</span></p>

<p class=MsoNormal><span lang=EN-US>[11] getClass</span></p>

<p class=MsoNormal><span lang=EN-US>[12] notify</span></p>

<p class=MsoNormal><span lang=EN-US>[13] notifyAll</span></p>

<p class=MsoNormal><span lang=EN-US>radio</span><span style='font-family:メイリオ'>は</span><span
lang=EN-US>Radio</span><span style='font-family:メイリオ'>クラスのインスタンスを参照している</span></p>

<p class=MsoNormal><span lang=EN-US>radio</span><span style='font-family:メイリオ'>は</span><span
lang=EN-US>Recorder</span><span style='font-family:メイリオ'>クラスのインスタンスを参照している</span></p>

<p class=MsoNormal><span lang=EN-US>radio</span><span style='font-family:メイリオ'>は</span><span
lang=EN-US>Clock</span><span style='font-family:メイリオ'>クラスのインスタンスを参照している</span><span
lang=EN-US>radio</span><span style='font-family:メイリオ'>は</span><span lang=EN-US>Radio</span><span
style='font-family:メイリオ'>クラスのインスタンスを参照している</span></p>

<p class=MsoNormal><span lang=EN-US>radio</span><span style='font-family:メイリオ'>は</span><span
lang=EN-US>Recorder</span><span style='font-family:メイリオ'>クラスのインスタンスを参照している</span></p>

<p class=MsoNormal><span lang=EN-US>radio</span><span style='font-family:メイリオ'>は</span><span
lang=EN-US>Clock</span><span style='font-family:メイリオ'>クラスのインスタンスを参照している</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.26.1 </span>インタフェースを使うとき</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>多重継承が必要な場合に使います。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>※</span><span lang=EN-US>
Java</span><span style='font-family:メイリオ'>は単一継承モデルです。従って、拡張できるスーパークラスは高々１つです。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761550"><span lang=EN-US>5.27 </span>例外クラス（<span
lang=EN-US>Exception</span>）</a></h2>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>では、プログラムの実行中に発生するエラーや異常な状況を「例外（</span><span
lang=EN-US>Exception</span><span style='font-family:メイリオ'>）」と呼びます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例外が発生すると、通常のプログラムの流れが中断され、例外を処理するためのコードが実行されます。</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>には、例外を扱うための特別なクラスが用意されています。</span></p>

<h3><span lang=EN-US>5.27.1 </span>主な例外クラス</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Exception</span><span style='font-family:メイリオ'>クラス</span><span
lang=EN-US>:</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>すべての例外の基本クラスです。これを継承してカスタム例外を作成することもできます。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>通常、プログラムのロジック上で処理可能なエラーを表します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>RuntimeException</span><span style='font-family:
メイリオ'>クラス</span><span lang=EN-US>:</span></h6>

<p class=MsoNormal><span lang=EN-US>Exception</span><span style='font-family:
メイリオ'>クラスを継承するクラスで、プログラムの実行時に発生する例外を表します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例：</span><span lang=EN-US>NullPointerException,
ArrayIndexOutOfBoundsException</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>チェックされない例外（</span><span
lang=EN-US>Unchecked Exceptions</span><span style='font-family:メイリオ'>）と呼ばれ、コンパイル時には検出されません。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>IOException</span><span style='font-family:メイリオ'>クラス</span><span
lang=EN-US>:</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>入出力操作に関するエラーを表します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>ファイルの読み書き中に発生するエラーなどが含まれます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>SQLException</span><span style='font-family:
メイリオ'>クラス</span><span lang=EN-US>:</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>データベース操作中に発生するエラーを表します。</span></p>

<p class=MsoNormal><span lang=EN-US>SQL</span><span style='font-family:メイリオ'>クエリの実行中に発生する問題を扱います。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.27.2 </span>例外処理の基本構文</h3>

<p class=MsoNormal><span lang=EN-US>try {</span></p>

<p class=MsoNormal><span lang=EN-US>    // </span><span style='font-family:
メイリオ'>エラーが発生する可能性のあるコード</span></p>

<p class=MsoNormal><span lang=EN-US>} catch (ExceptionType e) {</span></p>

<p class=MsoNormal><span lang=EN-US>    // </span><span style='font-family:
メイリオ'>例外が発生した場合の処理</span></p>

<p class=MsoNormal><span lang=EN-US>} finally {</span></p>

<p class=MsoNormal><span lang=EN-US>    // </span><span style='font-family:
メイリオ'>例外の発生に関係なく、必ず実行される処理</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>try</span><span style='font-family:メイリオ'>ブロック</span><span
lang=EN-US>: </span><span style='font-family:メイリオ'>エラーが発生する可能性のあるコードを囲みます。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>catch</span><span style='font-family:メイリオ'>ブロック</span><span
lang=EN-US>: </span><span style='font-family:メイリオ'>発生した例外をキャッチし、その処理を行います。</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>finally</span><span style='font-family:メイリオ'>ブロック</span><span
lang=EN-US>: </span><span style='font-family:メイリオ'>例外の有無に関わらず、必ず実行されるコードを記述します（省</span></h6>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761551"><span lang=EN-US>5.28 </span>スレッド</a></h2>

<p class=MsoNormal><span style='font-family:メイリオ'>スレッドとは、プログラムの実行単位のことです。</span><span
lang=EN-US>Java</span><span style='font-family:メイリオ'>では、マルチスレッドプログラミングをサポートしており、一つのプログラム内で複数のスレッドを実行することができます。これにより、同時に複数の処理を並行して行うことができ、プログラムの効率を向上させることができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>でスレッドを使用する方法は主に</span><span
lang=EN-US>2</span><span style='font-family:メイリオ'>つあります。</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Thread</span><span style='font-family:メイリオ'>クラスを拡張する方法</span></h6>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Runnable</span><span style='font-family:メイリオ'>インターフェースを実装する方法</span></h6>

<p class=MsoNormal><span lang=EN-US>Thread</span><span style='font-family:メイリオ'>クラスを拡張する方法では、</span><span
lang=EN-US>Thread</span><span style='font-family:メイリオ'>クラスを継承して新しいクラスを作成し、その中で</span><span
lang=EN-US>run</span><span style='font-family:メイリオ'>メソッドをオーバーライドします。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>一方、</span><span lang=EN-US>Runnable</span><span
style='font-family:メイリオ'>インターフェースを実装する方法では、</span><span lang=EN-US>Runnable</span><span
style='font-family:メイリオ'>インターフェースを実装したクラスを作成し、その中で</span><span lang=EN-US>run</span><span
style='font-family:メイリオ'>メソッドを定義します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>どちらの方法もスレッドの動作を定義するために</span><span
lang=EN-US>run</span><span style='font-family:メイリオ'>メソッドを使用します。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>サンプルプログラム</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. Thread</span><span style='font-family:
メイリオ'>クラスを拡張する方法</span></p>

<p class=MsoNormal><span lang=EN-US>class MyThread extends Thread {</span></p>

<p class=MsoNormal><span lang=EN-US>    @Override</span></p>

<p class=MsoNormal><span lang=EN-US>    public void run() {</span></p>

<p class=MsoNormal><span lang=EN-US>        for (int i = 0; i &lt; 5; i++) {</span></p>

<p class=MsoNormal><span lang=EN-US>            System.out.println(&quot;Thread:
&quot; + i);</span></p>

<p class=MsoNormal><span lang=EN-US>            try {</span></p>

<p class=MsoNormal><span lang=EN-US>                Thread.sleep(1000); // 1</span><span
style='font-family:メイリオ'>秒間スリープ</span></p>

<p class=MsoNormal><span lang=EN-US>            } catch (InterruptedException
e) {</span></p>

<p class=MsoNormal><span lang=EN-US>                e.printStackTrace();</span></p>

<p class=MsoNormal><span lang=EN-US>            }</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class Main {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        MyThread thread = new MyThread();</span></p>

<p class=MsoNormal><span lang=EN-US>        thread.start(); // </span><span
style='font-family:メイリオ'>スレッドの開始</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>2. Runnable</span><span style='font-family:
メイリオ'>インターフェースを実装する方法</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class MyRunnable implements Runnable {</span></p>

<p class=MsoNormal><span lang=EN-US>    @Override</span></p>

<p class=MsoNormal><span lang=EN-US>    public void run() {</span></p>

<p class=MsoNormal><span lang=EN-US>        for (int i = 0; i &lt; 5; i++) {</span></p>

<p class=MsoNormal><span lang=EN-US>           
System.out.println(&quot;Runnable: &quot; + i);</span></p>

<p class=MsoNormal><span lang=EN-US>            try {</span></p>

<p class=MsoNormal><span lang=EN-US>                Thread.sleep(1000); // 1</span><span
style='font-family:メイリオ'>秒間スリープ</span></p>

<p class=MsoNormal><span lang=EN-US>            } catch (InterruptedException
e) {</span></p>

<p class=MsoNormal><span lang=EN-US>                e.printStackTrace();</span></p>

<p class=MsoNormal><span lang=EN-US>            }</span></p>

<p class=MsoNormal><span lang=EN-US>        }</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>public class Main {</span></p>

<p class=MsoNormal><span lang=EN-US>    public static void main(String[] args)
{</span></p>

<p class=MsoNormal><span lang=EN-US>        Thread thread = new Thread(new
MyRunnable());</span></p>

<p class=MsoNormal><span lang=EN-US>        thread.start(); // </span><span
style='font-family:メイリオ'>スレッドの開始</span></p>

<p class=MsoNormal><span lang=EN-US>    }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>これらのサンプルプログラムでは、新しいスレッドが作成され、そのスレッド内で</span><span
lang=EN-US>run</span><span style='font-family:メイリオ'>メソッドが実行されます。各スレッドは、</span><span
lang=EN-US>0</span><span style='font-family:メイリオ'>から</span><span lang=EN-US>4</span><span
style='font-family:メイリオ'>までの数字を</span><span lang=EN-US>1</span><span
style='font-family:メイリオ'>秒ごとに出力します。</span><span lang=EN-US>Thread.sleep</span><span
style='font-family:メイリオ'>メソッドを使用してスレッドを指定した時間だけ一時停止させることができます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2><a name="_Toc173761552"><span lang=EN-US>5.29 </span>パッケージ</a></h2>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>のパッケージ（</span><span
lang=EN-US>package</span><span style='font-family:メイリオ'>）は、クラスやインターフェースを分類、整理するための仕組みです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>以下にパッケージの簡単な説明と使用例をいくつか挙げます。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3><span lang=EN-US>5.29.1 </span>パッケージの概要</h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>パッケージの定義</span><span lang=EN-US>:</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>パッケージは、関連するクラスやインターフェースをグループ化するための名前空間です。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>パッケージ名は、通常ドメイン名を逆にした形式（例：</span><span
lang=EN-US>com.example.project</span><span style='font-family:メイリオ'>）で命名されます。</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>パッケージの宣言</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>クラスファイルの最初にパッケージを宣言します。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span> <span lang=EN-US>package
com.example.project;</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>インポート</span></h6>

<p class=MsoNormal><span style='font-family:メイリオ'>他のパッケージ内のクラスを使用するためには、そのパッケージをインポートする必要があります。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span> <span lang=EN-US>import
java.util.List;</span></p>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>のパッケージはクラスやインターフェースを整理し、コードの再利用性を高め、名前の衝突を避けるために非常に重要です。標準パッケージを効果的に利用することで、様々な機能を簡単に実装できます。</span></p>

<h6><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:メイリオ'>パッケージ名の命名規則</span></h6>

<p class=MsoNormal><span lang=EN-US>Java</span><span style='font-family:メイリオ'>のパッケージ名にはいくつかの命名規則があります。主な規則として、すべて小文字で書かれることと、複数の単語はドットで区切ることが推奨されています。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>以下の例を考えてみましょう。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span><span lang=EN-US>account_management:
</span><span style='font-family:メイリオ'>アンダースコアを使うのは</span><span lang=EN-US>Java</span><span
style='font-family:メイリオ'>のパッケージ名として一般的ではありません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span><span lang=EN-US>accountManagement:
</span><span style='font-family:メイリオ'>キャメルケースもパッケージ名としては一般的ではありません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>例</span><span lang=EN-US>Accountmanagement:
</span><span style='font-family:メイリオ'>大文字を使うのは推奨されません。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>最も適切な名前は以下のように、ドットで単語を区切り、すべて小文字にするスタイルです。</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>推奨される名前</span></p>

<p class=MsoNormal><span lang=EN-US>account.management</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h1><a name="_Toc173761553"><span lang=EN-US>6． </span>オブジェクト指向技術の導入</a></h1>

<p class=MsoNormal><span lang=EN-US><a
href="http://www.fk-nextdesign.sakura.ne.jp/ddd/index.html">http://www.fk-nextdesign.sakura.ne.jp/ddd/index.html</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h1><a name="_Toc173761554"><span lang=EN-US>7． </span>永続化戦略</a></h1>

<p class=MsoNormal><span lang=EN-US><a
href="https://atmarkit.itmedia.co.jp/fdb/rensai/javapersis01/javapersis01_1.html">https://atmarkit.itmedia.co.jp/fdb/rensai/javapersis01/javapersis01_1.html</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:メイリオ'>＊＊＊　終り　＊＊＊</span></p>

</div>

</body>

</html>
